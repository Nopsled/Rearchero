ðŸ“¦
4374 /Rearchero/Brida/brida.js.map
4866 /Rearchero/Brida/brida.js
72246 /Rearchero/Brida/androidDefaultHooks.js.map
96635 /Rearchero/Brida/androidDefaultHooks.js
18356 /Rearchero/Brida/bridaFunctions.js.map
20763 /Rearchero/Brida/bridaFunctions.js
38303 /Rearchero/Brida/iosDefaultHooks.js.map
43038 /Rearchero/Brida/iosDefaultHooks.js
âœ„
{"version":3,"file":"brida.js","sourceRoot":"/Users/martinjakobsson/","sources":["Rearchero/Brida/brida.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,wBAAwB,EAAE,eAAe,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,MAAM,0BAA0B,CAAA;AACrK,OAAO,EAAE,iCAAiC,EAAE,aAAa,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAA;AACnJ,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,EAAE,YAAY,EAAE,eAAe,EAAE,qBAAqB,EAAE,0BAA0B,EAAE,kBAAkB,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAA;AAC/N,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAA;AACzJ,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AAEhH,+EAA+E;AAC/E,0DAA0D;AAE1D,GAAG,CAAC,OAAO,GAAG;IACb,qBAAqB,EAAE,wBAAwB,EAAE,eAAe,EAAE,yBAAyB,EAAE,6BAA6B;IACvH,iCAAiC,EAAE,aAAa,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,eAAe;IAC3G,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,EAAE,YAAY,EAAE,eAAe,EAAE,qBAAqB,EAAE,0BAA0B,EAAE,kBAAkB,EAAE,QAAQ;IACxL,aAAa,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe;IACnH,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB,EAAE,WAAW;IAE1E,oHAAoH;IACpH,gBAAgB,EAAE;QAEjB,eAAe;QACf,mDAAmD;IAEpD,CAAC;IAED,gEAAgE;CAEhE,CAAA;AAED,4BAA4B;AAE5B,sBAAsB;AACtB,sBAAsB;AAErB,MAAM;AAEP,GAAG;AAIH,oEAAoE;AAEpE,uCAAuC;AACvC,SAAS,UAAU,CAAC,GAAG;IACnB,KAAK,IAAI,KAAK,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;QAClD,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3C,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,yCAAyC;AACzC,SAAS,WAAW,CAAC,GAAG;IACpB,OAAO,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;QAC/B,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAChB,CAAC;AAED,yCAAyC;AACzC,SAAS,WAAW,CAAC,MAAM;IACvB,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAA,kBAAkB;IAC9C,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;QAClC,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/D,OAAO,GAAG,CAAC;AACf,CAAC;AAED,uCAAuC;AACvC,SAAS,UAAU,CAAC,KAAK;IACrB,KAAK,IAAI,GAAG,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC7C,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QACxC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;KAC3C;IACD,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC;AAED,+BAA+B;AAC/B,6CAA6C;AAC7C,SAAS,iBAAiB,CAAC,WAAW;IACpC,IAAI,MAAM,GAAM,EAAE,CAAA;IAClB,IAAI,SAAS,GAAG,kEAAkE,CAAA;IAElF,IAAI,KAAK,GAAW,IAAI,UAAU,CAAC,WAAW,CAAC,CAAA;IAC/C,IAAI,UAAU,GAAM,KAAK,CAAC,UAAU,CAAA;IACpC,IAAI,aAAa,GAAG,UAAU,GAAG,CAAC,CAAA;IAClC,IAAI,UAAU,GAAM,UAAU,GAAG,aAAa,CAAA;IAE9C,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA;IACd,IAAI,KAAK,CAAA;IAET,4CAA4C;IAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACzC,gDAAgD;QAChD,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;QAE7D,0DAA0D;QAC1D,CAAC,GAAG,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAA,CAAC,6BAA6B;QAC1D,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,IAAM,EAAE,CAAA,CAAC,6BAA6B;QAC1D,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,IAAS,CAAC,CAAA,CAAC,4BAA4B;QACzD,CAAC,GAAG,KAAK,GAAG,EAAE,CAAA,CAAe,qBAAqB;QAElD,oEAAoE;QACpE,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;KACpE;IAED,4CAA4C;IAC5C,IAAI,aAAa,IAAI,CAAC,EAAE;QACtB,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,CAAA;QAEzB,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,CAAA,CAAC,uBAAuB;QAE9C,2CAA2C;QAC3C,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,CAAC,CAAA,CAAC,gBAAgB;QAEvC,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;KAC7C;SAAM,IAAI,aAAa,IAAI,CAAC,EAAE;QAC7B,KAAK,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;QAExD,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAA,CAAC,0BAA0B;QACpD,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,IAAM,CAAC,CAAA,CAAC,yBAAyB;QAEnD,2CAA2C;QAC3C,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,IAAQ,CAAC,CAAA,CAAC,kBAAkB;QAE5C,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;KAC3D;IAED,OAAO,MAAM,CAAA;AACf,CAAC"}
âœ„
import { androidpinningwithca1, androidpinningwithoutca1, androidrooting1, androidfingerprintbypass1, androidfingerprintbypass2hook } from './androidDefaultHooks.js';
import { androidfingerprintbypass2function, tracekeystore, listaliasesstatic, listaliasesruntime, dumpcryptostuff } from './androidDefaultHooks.js';
import { ios10pinning, ios11pinning, ios12pinning, ios13pinning, iosbypasstouchid, iosjailbreak, iosdumpkeychain, iosdataprotectionkeys, iosdumpcurrentencryptedapp, dumpcryptostuffios, demangle } from './iosDefaultHooks.js';
import { getallclasses, getallmodules, getmoduleimports, getmoduleexports, getclassmethods, findobjcmethods, findjavamethods } from './bridaFunctions.js';
import { findimports, findexports, detachall, trace, changereturnvalue, getplatform } from './bridaFunctions.js';
// Brida User file: use this file to insert your Frida exports/hooks/functions.
// Do not remove existing code (it is necessary for Brida)
rpc.exports = {
    androidpinningwithca1, androidpinningwithoutca1, androidrooting1, androidfingerprintbypass1, androidfingerprintbypass2hook,
    androidfingerprintbypass2function, tracekeystore, listaliasesstatic, listaliasesruntime, dumpcryptostuff,
    ios10pinning, ios11pinning, ios12pinning, ios13pinning, iosbypasstouchid, iosjailbreak, iosdumpkeychain, iosdataprotectionkeys, iosdumpcurrentencryptedapp, dumpcryptostuffios, demangle,
    getallclasses, getallmodules, getmoduleimports, getmoduleexports, getclassmethods, findobjcmethods, findjavamethods,
    findimports, findexports, detachall, trace, changereturnvalue, getplatform,
    // BE CAREFUL: Do not use uppercase characters in exported function name (automatically converted lowercase by Pyro)
    exportedfunction: function () {
        // Do stuff...	
        // This functions can be called from custom plugins
    }
    // Put here the exported functions called by your custom plugins
};
// Put here you Frida hooks!
//if(ObjC.available) {
//if(Java.available) {
// ...
//}
// Auxiliary functions - You can remove them if you don't need them!
// Convert a hex string to a byte array
function hexToBytes(hex) {
    for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}
// Convert a ASCII string to a hex string
function stringToHex(str) {
    return str.split("").map(function (c) {
        return ("0" + c.charCodeAt(0).toString(16)).slice(-2);
    }).join("");
}
// Convert a hex string to a ASCII string
function hexToString(hexStr) {
    var hex = hexStr.toString(); //force conversion
    var str = '';
    for (var i = 0; i < hex.length; i += 2)
        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    return str;
}
// Convert a byte array to a hex string
function bytesToHex(bytes) {
    for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
    }
    return hex.join("");
}
// Native ArrayBuffer to Base64
// https://gist.github.com/jonleighton/958841
function base64ArrayBuffer(arrayBuffer) {
    var base64 = '';
    var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var bytes = new Uint8Array(arrayBuffer);
    var byteLength = bytes.byteLength;
    var byteRemainder = byteLength % 3;
    var mainLength = byteLength - byteRemainder;
    var a, b, c, d;
    var chunk;
    // Main loop deals with bytes in chunks of 3
    for (var i = 0; i < mainLength; i = i + 3) {
        // Combine the three bytes into a single integer
        chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        // Use bitmasks to extract 6-bit segments from the triplet
        a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
        b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12
        c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6
        d = chunk & 63; // 63       = 2^6 - 1
        // Convert the raw binary segments to the appropriate ASCII encoding
        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
    }
    // Deal with the remaining bytes and padding
    if (byteRemainder == 1) {
        chunk = bytes[mainLength];
        a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2
        // Set the 4 least significant bits to zero
        b = (chunk & 3) << 4; // 3   = 2^2 - 1
        base64 += encodings[a] + encodings[b] + '==';
    }
    else if (byteRemainder == 2) {
        chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];
        a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
        b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4
        // Set the 2 least significant bits to zero
        c = (chunk & 15) << 2; // 15    = 2^4 - 1
        base64 += encodings[a] + encodings[b] + encodings[c] + '=';
    }
    return base64;
}
âœ„
{"version":3,"file":"androidDefaultHooks.js","sourceRoot":"/Users/martinjakobsson/","sources":["Rearchero/Brida/androidDefaultHooks.js"],"names":[],"mappings":"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"}
âœ„
export function androidpinningwithca1() {
    Java.perform(function () {
        var CertificateFactory = Java.use("java.security.cert.CertificateFactory");
        var FileInputStream = Java.use("java.io.FileInputStream");
        var BufferedInputStream = Java.use("java.io.BufferedInputStream");
        var X509Certificate = Java.use("java.security.cert.X509Certificate");
        var KeyStore = Java.use("java.security.KeyStore");
        var TrustManagerFactory = Java.use("javax.net.ssl.TrustManagerFactory");
        var SSLContext = Java.use("javax.net.ssl.SSLContext");
        // Load CAs from an InputStream
        console.log("[+] Loading our CA...");
        var cf = CertificateFactory.getInstance("X.509");
        try {
            var fileInputStream = FileInputStream.$new("/data/local/tmp/cert-der.crt");
        }
        catch (err) {
            console.log("[o] " + err);
        }
        var bufferedInputStream = BufferedInputStream.$new(fileInputStream);
        var ca = cf.generateCertificate(bufferedInputStream);
        bufferedInputStream.close();
        var certInfo = Java.cast(ca, X509Certificate);
        console.log("[o] Our CA Info: " + certInfo.getSubjectDN());
        // Create a KeyStore containing our trusted CAs
        console.log("[+] Creating a KeyStore for our CA...");
        var keyStoreType = KeyStore.getDefaultType();
        var keyStore = KeyStore.getInstance(keyStoreType);
        keyStore.load(null, null);
        keyStore.setCertificateEntry("ca", ca);
        // Create a TrustManager that trusts the CAs in our KeyStore
        console.log("[+] Creating a TrustManager that trusts the CA in our KeyStore...");
        var tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
        var tmf = TrustManagerFactory.getInstance(tmfAlgorithm);
        tmf.init(keyStore);
        console.log("[+] Our TrustManager is ready...");
        console.log("[+] Hijacking SSLContext methods now...");
        console.log("[-] Waiting for the app to invoke SSLContext.init()...");
        SSLContext.init.overload("[Ljavax.net.ssl.KeyManager;", "[Ljavax.net.ssl.TrustManager;", "java.security.SecureRandom").implementation = function (a, b, c) {
            console.log("[o] App invoked javax.net.ssl.SSLContext.init...");
            SSLContext.init.overload("[Ljavax.net.ssl.KeyManager;", "[Ljavax.net.ssl.TrustManager;", "java.security.SecureRandom").call(this, a, tmf.getTrustManagers(), c);
            console.log("[+] SSLContext initialized with our custom TrustManager!");
        };
        auxiliary_android_pinning_hooks();
    });
}
export function androidpinningwithoutca1() {
    Java.perform(function () {
        var X509TrustManager = Java.use('javax.net.ssl.X509TrustManager');
        var SSLContext = Java.use('javax.net.ssl.SSLContext');
        // TrustManager (Android < 7)
        var TrustManager = Java.registerClass({
            // Implement a custom TrustManager
            name: 'com.sensepost.test.TrustManager',
            implements: [X509TrustManager],
            methods: {
                checkClientTrusted: function (chain, authType) { },
                checkServerTrusted: function (chain, authType) { },
                getAcceptedIssuers: function () { return []; }
            }
        });
        // Prepare the TrustManager array to pass to SSLContext.init()
        var TrustManagers = [TrustManager.$new()];
        // Get a handle on the init() on the SSLContext class
        var SSLContext_init = SSLContext.init.overload('[Ljavax.net.ssl.KeyManager;', '[Ljavax.net.ssl.TrustManager;', 'java.security.SecureRandom');
        try {
            // Override the init method, specifying the custom TrustManager
            SSLContext_init.implementation = function (keyManager, trustManager, secureRandom) {
                console.log('[+] Intercepted Trustmanager (Android < 7) request');
                SSLContext_init.call(this, keyManager, TrustManagers, secureRandom);
            };
            console.log('[+] Setup custom TrustManager (Android < 7)');
        }
        catch (err) {
            console.log('[-] TrustManager (Android < 7) pinner not found');
        }
        auxiliary_android_pinning_hooks();
    });
}
export function androidrooting1() {
    Java.perform(function () {
        var RootPackages = ["com.noshufou.android.su", "com.noshufou.android.su.elite", "eu.chainfire.supersu",
            "com.koushikdutta.superuser", "com.thirdparty.superuser", "com.yellowes.su", "com.koushikdutta.rommanager",
            "com.koushikdutta.rommanager.license", "com.dimonvideo.luckypatcher", "com.chelpus.lackypatch",
            "com.ramdroid.appquarantine", "com.ramdroid.appquarantinepro", "com.devadvance.rootcloak", "com.devadvance.rootcloakplus",
            "de.robv.android.xposed.installer", "com.saurik.substrate", "com.zachspong.temprootremovejb", "com.amphoras.hidemyroot",
            "com.amphoras.hidemyrootadfree", "com.formyhm.hiderootPremium", "com.formyhm.hideroot", "me.phh.superuser",
            "eu.chainfire.supersu.pro", "com.kingouser.com"
        ];
        var RootBinaries = ["su", "busybox", "supersu", "Superuser.apk", "KingoUser.apk", "SuperSu.apk"];
        var RootProperties = {
            "ro.build.selinux": "1",
            "ro.debuggable": "0",
            "service.adb.root": "0",
            "ro.secure": "1"
        };
        var RootPropertiesKeys = [];
        for (var k in RootProperties)
            RootPropertiesKeys.push(k);
        var PackageManager = Java.use("android.app.ApplicationPackageManager");
        var Runtime = Java.use('java.lang.Runtime');
        var NativeFile = Java.use('java.io.File');
        var String = Java.use('java.lang.String');
        var SystemProperties = Java.use('android.os.SystemProperties');
        var BufferedReader = Java.use('java.io.BufferedReader');
        var ProcessBuilder = Java.use('java.lang.ProcessBuilder');
        var StringBuffer = Java.use('java.lang.StringBuffer');
        var loaded_classes = Java.enumerateLoadedClassesSync();
        console.log("Loaded " + loaded_classes.length + " classes!");
        var useKeyInfo = false;
        var useProcessManager = false;
        console.log("loaded: " + loaded_classes.indexOf('java.lang.ProcessManager'));
        if (loaded_classes.indexOf('java.lang.ProcessManager') != -1) {
            try {
                //useProcessManager = true;
                //var ProcessManager = Java.use('java.lang.ProcessManager');
            }
            catch (err) {
                console.log("ProcessManager Hook failed: " + err);
            }
        }
        else {
            console.log("ProcessManager hook not loaded");
        }
        var KeyInfo = null;
        if (loaded_classes.indexOf('android.security.keystore.KeyInfo') != -1) {
            try {
                //useKeyInfo = true;
                //var KeyInfo = Java.use('android.security.keystore.KeyInfo');
            }
            catch (err) {
                console.log("KeyInfo Hook failed: " + err);
            }
        }
        else {
            console.log("KeyInfo hook not loaded");
        }
        PackageManager.getPackageInfo.implementation = function (pname, flags) {
            var shouldFakePackage = (RootPackages.indexOf(pname) > -1);
            if (shouldFakePackage) {
                console.log("Bypass root check for package: " + pname);
                pname = "set.package.name.to.a.fake.one.so.we.can.bypass.it";
            }
            return this.getPackageInfo.call(this, pname, flags);
        };
        NativeFile.exists.implementation = function () {
            var name = NativeFile.getName.call(this);
            var shouldFakeReturn = (RootBinaries.indexOf(name) > -1);
            if (shouldFakeReturn) {
                console.log("Bypass return value for binary: " + name);
                return false;
            }
            else {
                return this.exists.call(this);
            }
        };
        var exec = Runtime.exec.overload('[Ljava.lang.String;');
        var exec1 = Runtime.exec.overload('java.lang.String');
        var exec2 = Runtime.exec.overload('java.lang.String', '[Ljava.lang.String;');
        var exec3 = Runtime.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;');
        var exec4 = Runtime.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;', 'java.io.File');
        var exec5 = Runtime.exec.overload('java.lang.String', '[Ljava.lang.String;', 'java.io.File');
        exec5.implementation = function (cmd, env, dir) {
            if (cmd.indexOf("getprop") != -1 || cmd == "mount" || cmd.indexOf("build.prop") != -1 || cmd == "id" || cmd == "sh") {
                var fakeCmd = "grep";
                console.log("Bypass " + cmd + " command");
                return exec1.call(this, fakeCmd);
            }
            if (cmd == "su") {
                var fakeCmd = "justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled";
                console.log("Bypass " + cmd + " command");
                return exec1.call(this, fakeCmd);
            }
            return exec5.call(this, cmd, env, dir);
        };
        exec4.implementation = function (cmdarr, env, file) {
            for (var i = 0; i < cmdarr.length; i = i + 1) {
                var tmp_cmd = cmdarr[i];
                if (tmp_cmd.indexOf("getprop") != -1 || tmp_cmd == "mount" || tmp_cmd.indexOf("build.prop") != -1 || tmp_cmd == "id" || tmp_cmd == "sh") {
                    var fakeCmd = "grep";
                    console.log("Bypass " + cmdarr + " command");
                    return exec1.call(this, fakeCmd);
                }
                if (tmp_cmd == "su") {
                    var fakeCmd = "justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled";
                    console.log("Bypass " + cmdarr + " command");
                    return exec1.call(this, fakeCmd);
                }
            }
            return exec4.call(this, cmdarr, env, file);
        };
        exec3.implementation = function (cmdarr, envp) {
            for (var i = 0; i < cmdarr.length; i = i + 1) {
                var tmp_cmd = cmdarr[i];
                if (tmp_cmd.indexOf("getprop") != -1 || tmp_cmd == "mount" || tmp_cmd.indexOf("build.prop") != -1 || tmp_cmd == "id" || tmp_cmd == "sh") {
                    var fakeCmd = "grep";
                    console.log("Bypass " + cmdarr + " command");
                    return exec1.call(this, fakeCmd);
                }
                if (tmp_cmd == "su") {
                    var fakeCmd = "justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled";
                    console.log("Bypass " + cmdarr + " command");
                    return exec1.call(this, fakeCmd);
                }
            }
            return exec3.call(this, cmdarr, envp);
        };
        exec2.implementation = function (cmd, env) {
            if (cmd.indexOf("getprop") != -1 || cmd == "mount" || cmd.indexOf("build.prop") != -1 || cmd == "id" || cmd == "sh") {
                var fakeCmd = "grep";
                console.log("Bypass " + cmd + " command");
                return exec1.call(this, fakeCmd);
            }
            if (cmd == "su") {
                var fakeCmd = "justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled";
                console.log("Bypass " + cmd + " command");
                return exec1.call(this, fakeCmd);
            }
            return exec2.call(this, cmd, env);
        };
        exec.implementation = function (cmd) {
            for (var i = 0; i < cmd.length; i = i + 1) {
                var tmp_cmd = cmd[i];
                if (tmp_cmd.indexOf("getprop") != -1 || tmp_cmd == "mount" || tmp_cmd.indexOf("build.prop") != -1 || tmp_cmd == "id" || tmp_cmd == "sh") {
                    var fakeCmd = "grep";
                    console.log("Bypass " + cmd + " command");
                    return exec1.call(this, fakeCmd);
                }
                if (tmp_cmd == "su") {
                    var fakeCmd = "justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled";
                    console.log("Bypass " + cmd + " command");
                    return exec1.call(this, fakeCmd);
                }
            }
            return exec.call(this, cmd);
        };
        exec1.implementation = function (cmd) {
            if (cmd.indexOf("getprop") != -1 || cmd == "mount" || cmd.indexOf("build.prop") != -1 || cmd == "id" || cmd == "sh") {
                var fakeCmd = "grep";
                console.log("Bypass " + cmd + " command");
                return exec1.call(this, fakeCmd);
            }
            if (cmd == "su") {
                var fakeCmd = "justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled";
                console.log("Bypass " + cmd + " command");
                return exec1.call(this, fakeCmd);
            }
            return exec1.call(this, cmd);
        };
        String.contains.implementation = function (name) {
            if (name == "test-keys") {
                console.log("Bypass test-keys check");
                return false;
            }
            return this.contains.call(this, name);
        };
        var get = SystemProperties.get.overload('java.lang.String');
        get.implementation = function (name) {
            if (RootPropertiesKeys.indexOf(name) != -1) {
                console.log("Bypass " + name);
                return RootProperties[name];
            }
            return this.get.call(this, name);
        };
        Interceptor.attach(Module.findExportByName("libc.so", "fopen"), {
            onEnter: function (args) {
                var path = Memory.readCString(args[0]);
                path = path.split("/");
                var executable = path[path.length - 1];
                var shouldFakeReturn = (RootBinaries.indexOf(executable) > -1);
                if (shouldFakeReturn) {
                    Memory.writeUtf8String(args[0], "/notexists");
                    console.log("Bypass native fopen");
                }
            },
            onLeave: function (retval) {
            }
        });
        Interceptor.attach(Module.findExportByName("libc.so", "system"), {
            onEnter: function (args) {
                var cmd = Memory.readCString(args[0]);
                console.log("SYSTEM CMD: " + cmd);
                if (cmd.indexOf("getprop") != -1 || cmd == "mount" || cmd.indexOf("build.prop") != -1 || cmd == "id") {
                    console.log("Bypass native system: " + cmd);
                    Memory.writeUtf8String(args[0], "grep");
                }
                if (cmd == "su") {
                    console.log("Bypass native system: " + cmd);
                    Memory.writeUtf8String(args[0], "justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled");
                }
            },
            onLeave: function (retval) {
            }
        });
        BufferedReader.readLine.implementation = function () {
            var text = this.readLine.call(this);
            if (text === null) {
                // just pass , i know it's ugly as hell but test != null won't work :(
            }
            else {
                var shouldFakeRead = (text.indexOf("ro.build.tags=test-keys") > -1);
                if (shouldFakeRead) {
                    console.log("Bypass build.prop file read");
                    text = text.replace("ro.build.tags=test-keys", "ro.build.tags=release-keys");
                }
            }
            return text;
        };
        var executeCommand = ProcessBuilder.command.overload('java.util.List');
        ProcessBuilder.start.implementation = function () {
            var cmd = this.command.call(this);
            var shouldModifyCommand = false;
            for (var i = 0; i < cmd.size(); i = i + 1) {
                var tmp_cmd = cmd.get(i).toString();
                if (tmp_cmd.indexOf("getprop") != -1 || tmp_cmd.indexOf("mount") != -1 || tmp_cmd.indexOf("build.prop") != -1 || tmp_cmd.indexOf("id") != -1) {
                    shouldModifyCommand = true;
                }
            }
            if (shouldModifyCommand) {
                console.log("Bypass ProcessBuilder " + cmd);
                this.command.call(this, ["grep"]);
                return this.start.call(this);
            }
            if (cmd.indexOf("su") != -1) {
                console.log("Bypass ProcessBuilder " + cmd);
                this.command.call(this, ["justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled"]);
                return this.start.call(this);
            }
            return this.start.call(this);
        };
        if (useProcessManager) {
            var ProcManExec = ProcessManager.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;', 'java.io.File', 'boolean');
            var ProcManExecVariant = ProcessManager.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;', 'java.lang.String', 'java.io.FileDescriptor', 'java.io.FileDescriptor', 'java.io.FileDescriptor', 'boolean');
            ProcManExec.implementation = function (cmd, env, workdir, redirectstderr) {
                var fake_cmd = cmd;
                for (var i = 0; i < cmd.length; i = i + 1) {
                    var tmp_cmd = cmd[i];
                    if (tmp_cmd.indexOf("getprop") != -1 || tmp_cmd == "mount" || tmp_cmd.indexOf("build.prop") != -1 || tmp_cmd == "id") {
                        var fake_cmd = ["grep"];
                        console.log("Bypass " + cmdarr + " command");
                    }
                    if (tmp_cmd == "su") {
                        var fake_cmd = ["justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled"];
                        console.log("Bypass " + cmdarr + " command");
                    }
                }
                return ProcManExec.call(this, fake_cmd, env, workdir, redirectstderr);
            };
            ProcManExecVariant.implementation = function (cmd, env, directory, stdin, stdout, stderr, redirect) {
                var fake_cmd = cmd;
                for (var i = 0; i < cmd.length; i = i + 1) {
                    var tmp_cmd = cmd[i];
                    if (tmp_cmd.indexOf("getprop") != -1 || tmp_cmd == "mount" || tmp_cmd.indexOf("build.prop") != -1 || tmp_cmd == "id") {
                        var fake_cmd = ["grep"];
                        console.log("Bypass " + cmdarr + " command");
                    }
                    if (tmp_cmd == "su") {
                        var fake_cmd = ["justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled"];
                        console.log("Bypass " + cmdarr + " command");
                    }
                }
                return ProcManExecVariant.call(this, fake_cmd, env, directory, stdin, stdout, stderr, redirect);
            };
        }
        if (useKeyInfo) {
            KeyInfo.isInsideSecureHardware.implementation = function () {
                console.log("Bypass isInsideSecureHardware");
                return true;
            };
        }
    });
}
// By FSecureLABS
// https://raw.githubusercontent.com/FSecureLABS/android-keystore-audit/master/frida-scripts/fingerprint-bypass.js
export function androidfingerprintbypass1() {
    console.log("Fingerprint hooks loaded!");
    Java.perform(function () {
        //Call in try catch as Biometric prompt is supported since api 28 (Android 9)
        try {
            hookBiometricPrompt_authenticate();
        }
        catch (error) {
            console.log("hookBiometricPrompt_authenticate not supported on this android version");
        }
        try {
            hookBiometricPrompt_authenticate2();
        }
        catch (error) {
            console.log("hookBiometricPrompt_authenticate not supported on this android version");
        }
        try {
            hookFingerprintManagerCompat_authenticate();
        }
        catch (error) {
            console.log("hookFingerprintManagerCompat_authenticate failed");
        }
        try {
            hookFingerprintManager_authenticate();
        }
        catch (error) {
            console.log("hookFingerprintManager_authenticate failed");
        }
    });
    var cipherList = [];
    var StringCls = null;
    Java.perform(function () {
        StringCls = Java.use('java.lang.String');
    });
    function getAuthResult(resultObj, cryptoInst) {
        try {
            var authenticationResultInst = resultObj.$new(cryptoInst, null, 0);
        }
        catch (error) {
            try {
                var authenticationResultInst = resultObj.$new(cryptoInst, null);
            }
            catch (error) {
                var authenticationResultInst = resultObj.$new(cryptoInst);
            }
        }
        console.log("cryptoInst:, " + cryptoInst + " class: " + cryptoInst.$className);
        return authenticationResultInst;
    }
    function getBiometricPromptAuthResult() {
        var sweet_cipher = null;
        var cryptoObj = Java.use('android.hardware.biometrics.BiometricPrompt$CryptoObject');
        var cryptoInst = cryptoObj.$new(sweet_cipher);
        var authenticationResultObj = Java.use('android.hardware.biometrics.BiometricPrompt$AuthenticationResult');
        var authenticationResultInst = getAuthResult(authenticationResultObj, cryptoInst);
        return authenticationResultInst;
    }
    function hookBiometricPrompt_authenticate() {
        var biometricPrompt = Java.use('android.hardware.biometrics.BiometricPrompt')['authenticate'].overload('android.os.CancellationSignal', 'java.util.concurrent.Executor', 'android.hardware.biometrics.BiometricPrompt$AuthenticationCallback');
        console.log("Hooking BiometricPrompt.authenticate()...");
        biometricPrompt.implementation = function (cancellationSignal, executor, callback) {
            console.log("[BiometricPrompt.BiometricPrompt()]: cancellationSignal: " + cancellationSignal + ", executor: " + ", callback: " + callback);
            var authenticationResultInst = getBiometricPromptAuthResult();
            callback.onAuthenticationSucceeded(authenticationResultInst);
        };
    }
    function hookBiometricPrompt_authenticate2() {
        var biometricPrompt = Java.use('android.hardware.biometrics.BiometricPrompt')['authenticate'].overload('android.hardware.biometrics.BiometricPrompt$CryptoObject', 'android.os.CancellationSignal', 'java.util.concurrent.Executor', 'android.hardware.biometrics.BiometricPrompt$AuthenticationCallback');
        console.log("Hooking BiometricPrompt.authenticate2()...");
        biometricPrompt.implementation = function (crypto, cancellationSignal, executor, callback) {
            console.log("[BiometricPrompt.BiometricPrompt2()]: crypto:" + crypto + ", cancellationSignal: " + cancellationSignal + ", executor: " + ", callback: " + callback);
            var authenticationResultInst = getBiometricPromptAuthResult();
            callback.onAuthenticationSucceeded(authenticationResultInst);
        };
    }
    function hookFingerprintManagerCompat_authenticate() {
        var fingerprintManagerCompat = null;
        var cryptoObj = null;
        var authenticationResultObj = null;
        try {
            fingerprintManagerCompat = Java.use('android.support.v4.hardware.fingerprint.FingerprintManagerCompat');
            cryptoObj = Java.use('android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject');
            authenticationResultObj = Java.use('android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult');
        }
        catch (error) {
            try {
                fingerprintManagerCompat = Java.use('androidx.core.hardware.fingerprint.FingerprintManagerCompat');
                cryptoObj = Java.use('androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject');
                authenticationResultObj = Java.use('androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult');
            }
            catch (error) {
                console.log("FingerprintManagerCompat class not found!");
                return;
            }
        }
        console.log("Hooking FingerprintManagerCompat.authenticate()...");
        var fingerprintManagerCompat_authenticate = fingerprintManagerCompat['authenticate'];
        fingerprintManagerCompat_authenticate.implementation = function (crypto, flags, cancel, callback, handler) {
            console.log("[FingerprintManagerCompat.authenticate()]: crypto: " + crypto + ", flags: " + flags + ", cancel:" + cancel + ", callback: " + callback + ", handler: " + handler);
            //console.log(enumMethods(callback.$className));
            callback['onAuthenticationFailed'].implementation = function () {
                console.log("[onAuthenticationFailed()]:");
                var sweet_cipher = null;
                var cryptoInst = cryptoObj.$new(sweet_cipher);
                var authenticationResultInst = getAuthResult(authenticationResultObj, cryptoInst);
                callback.onAuthenticationSucceeded(authenticationResultInst);
            };
            return this.authenticate(crypto, flags, cancel, callback, handler);
        };
    }
    function hookFingerprintManager_authenticate() {
        var fingerprintManager = null;
        var cryptoObj = null;
        var authenticationResultObj = null;
        try {
            fingerprintManager = Java.use('android.hardware.fingerprint.FingerprintManager');
            cryptoObj = Java.use('android.hardware.fingerprint.FingerprintManager$CryptoObject');
            authenticationResultObj = Java.use('android.hardware.fingerprint.FingerprintManager$AuthenticationResult');
        }
        catch (error) {
            try {
                fingerprintManager = Java.use('androidx.core.hardware.fingerprint.FingerprintManager');
                cryptoObj = Java.use('androidx.core.hardware.fingerprint.FingerprintManager$CryptoObject');
                authenticationResultObj = Java.use('androidx.core.hardware.fingerprint.FingerprintManager$AuthenticationResult');
            }
            catch (error) {
                console.log("FingerprintManager class not found!");
                return;
            }
        }
        console.log("Hooking FingerprintManager.authenticate()...");
        var fingerprintManager_authenticate = fingerprintManager['authenticate'].overload('android.hardware.fingerprint.FingerprintManager$CryptoObject', 'android.os.CancellationSignal', 'int', 'android.hardware.fingerprint.FingerprintManager$AuthenticationCallback', 'android.os.Handler');
        fingerprintManager_authenticate.implementation = function (crypto, cancel, flags, callback, handler) {
            console.log("[FingerprintManager.authenticate()]: crypto: " + crypto + ", flags: " + flags + ", cancel:" + cancel + ", callback: " + callback + ", handler: " + handler);
            var sweet_cipher = null;
            var cryptoInst = cryptoObj.$new(sweet_cipher);
            var authenticationResultInst = getAuthResult(authenticationResultObj, cryptoInst);
            callback.onAuthenticationSucceeded(authenticationResultInst);
            return this.authenticate(crypto, cancel, flags, callback, handler);
        };
    }
    function enumMethods(targetClass) {
        var hook = Java.use(targetClass);
        var ownMethods = hook.class.getDeclaredMethods();
        return ownMethods;
    }
}
// By FSecureLABS
// https://raw.githubusercontent.com/FSecureLABS/android-keystore-audit/master/frida-scripts/fingerprint-bypass-via-exception-handling.js
export function androidfingerprintbypass2hook() {
    /*
        Fingerprint bypass via Exception Handling.
        We assume that application use CryptoObject to perform some crypto stuff in the onAuthenticationSucceeded only to confirm that fingerprint authentication (e.g. all data is encrypted using key other than this from fingerprint ).

        How to use:
        1. Attach script to application.
        1. Trigger fingerprint screen (frida should log that authenticate() method was called)
        3. run bypass() function.

    */
    console.log("Fingerprint hooks loaded!");
    Java.perform(function () {
        //Call in try catch as Biometric prompt is supported since api 28 (Android 9)
        try {
            hookBiometricPrompt_authenticate();
        }
        catch (error) {
            console.log("hookBiometricPrompt_authenticate not supported on this android version");
        }
        try {
            hookBiometricPrompt_authenticate2();
        }
        catch (error) {
            console.log("hookBiometricPrompt_authenticate not supported on this android version");
        }
        //hookFingerprintManagerCompat_authenticate();
        hookFingerprintManager_authenticate();
        hookDoFinal();
        hookDoFinal2();
        hookDoFinal3();
        hookDoFinal4();
        hookDoFinal5();
        hookDoFinal6();
        hookDoFinal7();
        hookUpdate();
        hookUpdate2();
        hookUpdate3();
        hookUpdate4();
        hookUpdate5();
    });
    var cipherList = [];
    var StringCls = null;
    Java.perform(function () {
        StringCls = Java.use('java.lang.String');
    });
    function hookBiometricPrompt_authenticate() {
        var biometricPrompt = Java.use('android.hardware.biometrics.BiometricPrompt')['authenticate'].overload('android.os.CancellationSignal', 'java.util.concurrent.Executor', 'android.hardware.biometrics.BiometricPrompt$AuthenticationCallback');
        console.log("Hooking BiometricPrompt.authenticate()...");
        biometricPrompt.implementation = function (cancellationSignal, executor, callback) {
            console.log("[BiometricPrompt.BiometricPrompt()]: cancellationSignal: " + cancellationSignal + ", executor: " + ", callback: " + callback);
            var sweet_cipher = null;
            var cryptoObj = Java.use('android.hardware.biometrics.BiometricPrompt$CryptoObject');
            var cryptoInst = cryptoObj.$new(sweet_cipher);
            var authenticationResultObj = Java.use('android.hardware.biometrics.BiometricPrompt$AuthenticationResult');
            global.authenticationResultInst = authenticationResultObj.$new(cryptoInst, null, 0);
            console.log("cryptoInst:, " + cryptoInst + " class: " + cryptoInst.$className);
            callback.onAuthenticationSucceeded(authenticationResultInst);
            //return this.authenticate(cancellationSignal,executor,callback);
        };
    }
    function hookBiometricPrompt_authenticate2() {
        var biometricPrompt = Java.use('android.hardware.biometrics.BiometricPrompt')['authenticate'].overload('android.hardware.biometrics.BiometricPrompt$CryptoObject', 'android.os.CancellationSignal', 'java.util.concurrent.Executor', 'android.hardware.biometrics.BiometricPrompt$AuthenticationCallback');
        console.log("Hooking BiometricPrompt.authenticate2()...");
        biometricPrompt.implementation = function (crypto, cancellationSignal, executor, callback) {
            console.log("[BiometricPrompt.BiometricPrompt2()]: crypto:" + crypto + ", cancellationSignal: " + cancellationSignal + ", executor: " + ", callback: " + callback);
            var authenticationResultObj = Java.use('android.hardware.biometrics.BiometricPrompt$AuthenticationResult');
            global.authenticationResultInst = authenticationResultObj.$new(crypto, null, 0);
            global.callbackG = callback;
            //callback.onAuthenticationSucceeded(authenticationResultInst);
            return this.authenticate(crypto, cancellationSignal, executor, callback);
        };
    }
    function hookFingerprintManagerCompat_authenticate() {
        var fingerprintManagerCompat = null;
        var cryptoObj = null;
        var authenticationResultObj = null;
        try {
            fingerprintManagerCompat = Java.use('android.support.v4.hardware.fingerprint.FingerprintManagerCompat');
            cryptoObj = Java.use('android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject');
            authenticationResultObj = Java.use('android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult');
        }
        catch (error) { }
        if (fingerprintManagerCompat == null) {
            try {
                fingerprintManagerCompat = Java.use('androidx.core.hardware.fingerprint.FingerprintManagerCompat');
                cryptoObj = Java.use('androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject');
                authenticationResultObj = Java.use('androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult');
            }
            catch (error) { }
        }
        if (fingerprintManagerCompat == null) {
            console.log("FingerprintManagerCompat class not found!");
            return;
        }
        console.log("Hooking FingerprintManagerCompat.authenticate()...");
        var fingerprintManagerCompat_authenticate = fingerprintManagerCompat['authenticate'];
        fingerprintManagerCompat_authenticate.implementation = function (crypto, flags, cancel, callback, handler) {
            console.log("[FingerprintManagerCompat.authenticate()]: crypto: " + crypto + ", flags: " + flags + ", cancel:" + cancel + ", callback: " + callback + ", handler: " + handler);
            //console.log(enumMethods(callback.$className));
            // Hook onAuthenticationFailed
            callback['onAuthenticationFailed'].implementation = function () {
                console.log("[onAuthenticationFailed()]:");
            };
            global.authenticationResultInst = authenticationResultObj.$new(crypto, null, 0);
            global.callbackG = callback;
            return this.authenticate(crypto, flags, cancel, callback, handler);
        };
    }
    function hookFingerprintManager_authenticate() {
        var fingerprintManager = null;
        var cryptoObj = null;
        var authenticationResultObj = null;
        try {
            fingerprintManager = Java.use('android.hardware.fingerprint.FingerprintManager');
            cryptoObj = Java.use('android.hardware.fingerprint.FingerprintManager$CryptoObject');
            authenticationResultObj = Java.use('android.hardware.fingerprint.FingerprintManager$AuthenticationResult');
        }
        catch (error) { }
        if (fingerprintManager == null) {
            try {
                fingerprintManager = Java.use('androidx.core.hardware.fingerprint.FingerprintManager');
                cryptoObj = Java.use('androidx.core.hardware.fingerprint.FingerprintManager$CryptoObject');
                authenticationResultObj = Java.use('androidx.core.hardware.fingerprint.FingerprintManager$AuthenticationResult');
            }
            catch (error) { }
        }
        if (fingerprintManager == null) {
            console.log("FingerprintManager class not found!");
            return;
        }
        console.log("Hooking FingerprintManager.authenticate()...");
        var fingerprintManager_authenticate = fingerprintManager['authenticate'].overload('android.hardware.fingerprint.FingerprintManager$CryptoObject', 'android.os.CancellationSignal', 'int', 'android.hardware.fingerprint.FingerprintManager$AuthenticationCallback', 'android.os.Handler');
        fingerprintManager_authenticate.implementation = function (crypto, cancel, flags, callback, handler) {
            console.log("[FingerprintManager.authenticate()]: crypto: " + crypto + ", flags: " + flags + ", cancel:" + cancel + ", callback: " + callback + ", handler: " + handler);
            global.authenticationResultInst = authenticationResultObj.$new(crypto, null, 0);
            global.callbackG = callback;
            return this.authenticate(crypto, cancel, flags, callback, handler);
        };
    }
    function enumMethods(targetClass) {
        var hook = Java.use(targetClass);
        var ownMethods = hook.class.getDeclaredMethods();
        return ownMethods;
    }
    function hookDoFinal() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload();
        var tmp = null;
        cipherInit.implementation = function () {
            console.log("[Cipher.doFinal()]: " + "  cipherObj: " + this);
            try {
                tmp = this.doFinal();
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return null;
                }
            }
            return tmp;
        };
    }
    function hookDoFinal2() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B');
        var tmp = null;
        cipherInit.implementation = function (byteArr) {
            console.log("[Cipher.doFinal2()]: " + "  cipherObj: " + this);
            try {
                tmp = this.doFinal(byteArr);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return byteArr;
                }
            }
            return tmp;
        };
    }
    function hookDoFinal3() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B', 'int');
        var tmp = null;
        cipherInit.implementation = function (byteArr, a1) {
            console.log("[Cipher.doFinal3()]: " + "  cipherObj: " + this);
            try {
                tmp = this.doFinal(byteArr, a1);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return 1;
                }
            }
            return tmp;
        };
    }
    function hookDoFinal4() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('java.nio.ByteBuffer', 'java.nio.ByteBuffer');
        var tmp = null;
        cipherInit.implementation = function (a1, a2) {
            console.log("[Cipher.doFinal4()]: " + "  cipherObj: " + this);
            try {
                tmp = this.doFinal(a1, a2);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return 1;
                }
            }
            return tmp;
        };
    }
    function hookDoFinal5() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B', 'int', 'int');
        var tmp = null;
        cipherInit.implementation = function (byteArr, a1, a2) {
            console.log("[Cipher.doFinal5()]: " + "  cipherObj: " + this);
            try {
                tmp = this.doFinal(byteArr, a1, a2);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return byteArr;
                }
            }
            return tmp;
        };
    }
    function hookDoFinal6() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B', 'int', 'int', '[B');
        var tmp = null;
        cipherInit.implementation = function (byteArr, a1, a2, outputArr) {
            console.log("[Cipher.doFinal6()]: " + "  cipherObj: " + this);
            try {
                tmp = this.doFinal(byteArr, a1, a2, outputArr);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return 1;
                }
            }
            return tmp;
        };
    }
    function hookDoFinal7() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B', 'int', 'int', '[B', 'int');
        var tmp = null;
        cipherInit.implementation = function (byteArr, a1, a2, outputArr, a4) {
            console.log("[Cipher.doFinal7()]: " + "  cipherObj: " + this);
            try {
                tmp = this.doFinal(byteArr, a1, a2, outputArr, a4);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return 1;
                }
            }
            return tmp;
        };
    }
    function hookUpdate() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('[B');
        var tmp = null;
        cipherInit.implementation = function (byteArr) {
            console.log("[Cipher.update()]: " + "  cipherObj: " + this);
            try {
                tmp = this.update(byteArr);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return byteArr;
                }
            }
            return tmp;
        };
    }
    function hookUpdate2() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('java.nio.ByteBuffer', 'java.nio.ByteBuffer');
        var tmp = null;
        cipherInit.implementation = function (byteArr, outputArr) {
            console.log("[Cipher.update2()]: " + "  cipherObj: " + this);
            try {
                tmp = this.update(byteArr, outputArr);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return 1;
                }
            }
            return tmp;
        };
    }
    function hookUpdate3() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('[B', 'int', 'int');
        var tmp = null;
        cipherInit.implementation = function (byteArr, a1, a2) {
            console.log("[Cipher.update3()]: " + "  cipherObj: " + this);
            try {
                tmp = this.update(byteArr, a1, a2);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return byteArr;
                }
            }
            return tmp;
        };
    }
    function hookUpdate4() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('[B', 'int', 'int', '[B');
        var tmp = null;
        cipherInit.implementation = function (byteArr, a1, a2, outputArr) {
            console.log("[Cipher.update4()]: " + "  cipherObj: " + this);
            try {
                tmp = this.update(byteArr, a1, a2, outputArr);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return 1;
                }
            }
            return tmp;
        };
    }
    function hookUpdate5() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('[B', 'int', 'int', '[B', 'int');
        var tmp = null;
        cipherInit.implementation = function (byteArr, a1, a2, outputArr, a4) {
            console.log("[Cipher.update5()]: " + "  cipherObj: " + this);
            try {
                tmp = this.update(byteArr, a1, a2, outputArr, a4);
            }
            catch (error) {
                console.log("exception catched! " + error);
                if ((error + "").indexOf("javax.crypto.IllegalBlockSizeException") == -1)
                    throw error;
                else {
                    return 1;
                }
            }
            return tmp;
        };
    }
}
// By FSecureLABS
// https://raw.githubusercontent.com/FSecureLABS/android-keystore-audit/master/frida-scripts/fingerprint-bypass-via-exception-handling.js
export function androidfingerprintbypass2function() {
    Java.perform(function () {
        try {
            var Runnable = Java.use('java.lang.Runnable');
            var Runner = Java.registerClass({
                name: 'com.MWR.Runner',
                implements: [Runnable],
                methods: {
                    run: function () {
                        try {
                            callbackG.onAuthenticationSucceeded(authenticationResultInst); // we just need to call this single line (other code is needed to call this on UI thread)
                        }
                        catch (error) {
                            console.log("exception catched!" + error);
                        }
                    }
                }
            });
            var Handler = Java.use('android.os.Handler');
            var Looper = Java.use('android.os.Looper');
            var loop = Looper.getMainLooper();
            var handler = Handler.$new(loop);
            handler.post(Runner.$new());
        }
        catch (e) {
            console.log("registerClass error3 >>>>>>>> " + e);
        }
    });
}
// FSecureLABS
// https://raw.githubusercontent.com/FSecureLABS/android-keystore-audit/master/frida-scripts/tracer-keystore.js
export function tracekeystore() {
    Java.perform(function () {
        hookKeystoreGetInstance();
        hookKeystoreGetInstance_Provider();
        hookKeystoreGetInstance_Provider2();
        hookKeystoreConstructor();
        hookKeystoreLoad(false);
        hookKeystoreLoadStream(false);
        hookKeystoreGetKey();
        hookKeystoreSetKeyEntry();
        //hookKeystoreGetCertificate();
        hookKeystoreGetCertificateChain();
        hookKeystoreGetEntry();
        hookKeystoreSetEntry();
        hookKeystoreSetKeyEntry();
        hookKeystoreSetKeyEntry2();
        hookKeystoreStore();
        hookKeystoreStoreStream();
    });
    console.log("KeyStore hooks loaded!");
    global.keystoreList = [];
    var StringCls = null;
    Java.perform(function () {
        StringCls = Java.use('java.lang.String');
    });
    function hookKeystoreConstructor() {
        var keyStoreConstructor = Java.use('java.security.KeyStore').$init.overload("java.security.KeyStoreSpi", "java.security.Provider", "java.lang.String");
        keyStoreConstructor.implementation = function (keyStoreSpi, provider, type) {
            //console.log("[Call] Keystore(java.security.KeyStoreSpi, java.security.Provider, java.lang.String )")
            console.log("[Keystore()]: KeyStoreSpi: " + keyStoreSpi + ", Provider: " + provider + ", type: " + type);
            return this.$init(keyStoreSpi, provider, type);
        };
    }
    function hookKeystoreGetInstance() {
        var keyStoreGetInstance = Java.use('java.security.KeyStore')['getInstance'].overload("java.lang.String");
        keyStoreGetInstance.implementation = function (type) {
            //console.log("[Call] Keystore.getInstance(java.lang.String )")
            console.log("[Keystore.getInstance()]: type: " + type);
            var tmp = this.getInstance(type);
            global.keystoreList.push(tmp); // Collect keystore objects to allow dump them later using ListAliasesRuntime()
            return tmp;
        };
    }
    function hookKeystoreGetInstance_Provider() {
        var keyStoreGetInstance = Java.use('java.security.KeyStore')['getInstance'].overload("java.lang.String", "java.lang.String");
        keyStoreGetInstance.implementation = function (type, provider) {
            //console.log("[Call] Keystore.getInstance(java.lang.String, java.lang.String )")
            console.log("[Keystore.getInstance2()]: type: " + type + ", provider: " + provider);
            var tmp = this.getInstance(type, proivder);
            global.keystoreList.push(tmp); // Collect keystore objects to allow dump them later using ListAliasesRuntime()
            return tmp;
        };
    }
    function hookKeystoreGetInstance_Provider2() {
        var keyStoreGetInstance = Java.use('java.security.KeyStore')['getInstance'].overload("java.lang.String", "java.security.Provider");
        keyStoreGetInstance.implementation = function (type, provider) {
            //console.log("[Call] Keystore.getInstance(java.lang.String, java.security.Provider )")
            console.log("[Keystore.getInstance2()]: type: " + type + ", provider: " + provider);
            var tmp = this.getInstance(type, proivder);
            global.keystoreList.push(tmp); // Collect keystore objects to allow dump them later using ListAliasesRuntime()
            return tmp;
        };
    }
    /*
    * Hook Keystore.load( ... ), set dump to true if you want to perform dump of available Aliases automatically.
    */
    function hookKeystoreLoad(dump) {
        var keyStoreLoad = Java.use('java.security.KeyStore')['load'].overload('java.security.KeyStore$LoadStoreParameter');
        /* following function hooks to a Keystore.load(java.security.KeyStore.LoadStoreParameter) */
        keyStoreLoad.implementation = function (param) {
            //console.log("[Call] Keystore.load(java.security.KeyStore.LoadStoreParameter)")
            console.log("[Keystore.load(LoadStoreParameter)]: keystoreType: " + this.getType() + ", param: " + param);
            this.load(param);
            if (dump)
                console.log(" Keystore loaded aliases: " + ListAliasesObj(this));
        };
    }
    /*
    * Hook Keystore.load( ... ), set dump to true if you want to perform dump of available Aliases automatically.
    */
    function hookKeystoreLoadStream(dump) {
        var keyStoreLoadStream = Java.use('java.security.KeyStore')['load'].overload('java.io.InputStream', '[C');
        /* following function hooks to a Keystore.load(InputStream stream, char[] password) */
        keyStoreLoadStream.implementation = function (stream, charArray) {
            //console.log("[Call] Keystore.load(InputStream stream, char[] password)")
            //var hexString = readStreamToHex (stream);
            console.log("[Keystore.load(InputStream, char[])]: keystoreType: " + this.getType() + ", password: '" + charArrayToString(charArray) + "', inputSteam: " + stream);
            this.load(stream, charArray);
            if (dump)
                console.log(" Keystore loaded aliases: " + ListAliasesObj(this));
        };
    }
    function hookKeystoreStore() {
        var keyStoreStoreStream = Java.use('java.security.KeyStore')['store'].overload('java.security.KeyStore$LoadStoreParameter');
        /* following function hooks to a Keystore.store(java.security.KeyStore$LoadStoreParameter) */
        keyStoreStoreStream.implementation = function (param) {
            console.log("[Keystore.store()]: keystoreType: " + this.getType() + ", param: '" + param);
            this.store(stream, charArray);
        };
    }
    function hookKeystoreStoreStream() {
        var keyStoreStoreStream = Java.use('java.security.KeyStore')['store'].overload('java.io.OutputStream', '[C');
        /* following function hooks to a Keystore.store(OutputStream stream, char[] password) */
        keyStoreStoreStream.implementation = function (stream, charArray) {
            console.log("[Keystore.store(OutputStream, char[])]: keystoreType: " + this.getType() + ", password: '" + charArrayToString(charArray) + "', outputSteam: " + stream);
            this.store(stream, charArray);
        };
    }
    function hookKeystoreGetKey() {
        var keyStoreGetKey = Java.use('java.security.KeyStore')['getKey'].overload("java.lang.String", "[C");
        keyStoreGetKey.implementation = function (alias, charArray) {
            //console.log("[Call] Keystore.getKey(java.lang.String, [C )")
            console.log("[Keystore.getKey()]: alias: " + alias + ", password: '" + charArrayToString(charArray) + "'");
            return this.getKey(alias, charArray);
        };
    }
    function hookKeystoreSetEntry() {
        var keyStoreSetKeyEntry = Java.use('java.security.KeyStore')['setEntry'].overload("java.lang.String", "java.security.KeyStore$Entry", "java.security.KeyStore$ProtectionParameter");
        keyStoreSetKeyEntry.implementation = function (alias, entry, protection) {
            //console.log("[Call] Keystore.setEntry(java.lang.String, java.security.KeyStore$Entry, java.security.KeyStore$ProtectionParameter )")
            console.log("[Keystore.setEntry()]: alias: " + alias + ", entry: " + dumpKeyStoreEntry(entry) + "', protection: " + dumpProtectionParameter(protection));
            return this.setEntry(alias, entry, protection);
        };
    }
    function hookKeystoreSetKeyEntry() {
        var keyStoreSetKeyEntry = Java.use('java.security.KeyStore')['setKeyEntry'].overload("java.lang.String", "java.security.Key", "[C", "[Ljava.security.cert.Certificate;");
        keyStoreSetKeyEntry.implementation = function (alias, key, charArray, certs) {
            //console.log("[Call] Keystore.setKeyEntry(java.lang.String, java.security.Key, [C, [Ljava.security.cert.Certificate; )
            console.log("[Keystore.setKeyEntry()]: alias: " + alias + ", key: " + key + ", password: '" + charArrayToString(charArray) + "', certs: " + certs);
            return this.setKeyEntry(alias, key, charArray, certs);
        };
    }
    function hookKeystoreSetKeyEntry2() {
        var keyStoreSetKeyEntry = Java.use('java.security.KeyStore')['setKeyEntry'].overload("java.lang.String", "[B", "[Ljava.security.cert.Certificate;");
        keyStoreSetKeyEntry.implementation = function (alias, key, certs) {
            //console.log("[Call] Keystore.setKeyEntry(java.lang.String, [B, [Ljava.security.cert.Certificate; )")
            console.log("[Keystore.setKeyEntry2()]: alias: " + alias + ", key: " + key + "', certs: " + certs);
            return this.setKeyEntry(alias, key, certs);
        };
    }
    /*
    * Usually used to load certs for cert pinning.
    */
    function hookKeystoreGetCertificate() {
        var keyStoreGetCertificate = Java.use('java.security.KeyStore')['getCertificate'].overload("java.lang.String");
        keyStoreGetCertificate.implementation = function (alias) {
            //console.log("[Call] Keystore.getCertificate(java.lang.String )")
            console.log("[Keystore.getCertificate()]: alias: " + alias);
            return this.getCertificate(alias);
        };
    }
    /*
    * Usually used to load certs for cert pinning.
    */
    function hookKeystoreGetCertificateChain() {
        var keyStoreGetCertificate = Java.use('java.security.KeyStore')['getCertificateChain'].overload("java.lang.String");
        keyStoreGetCertificate.implementation = function (alias) {
            //console.log("[Call] Keystore.getCertificateChain(java.lang.String )")
            console.log("[Keystore.getCertificateChain()]: alias: " + alias);
            return this.getCertificate(alias);
        };
    }
    function hookKeystoreGetEntry() {
        var keyStoreGetEntry = Java.use('java.security.KeyStore')['getEntry'].overload("java.lang.String", "java.security.KeyStore$ProtectionParameter");
        keyStoreGetEntry.implementation = function (alias, protection) {
            //console.log("[Call] Keystore.getEntry(java.lang.String, java.security.KeyStore$ProtectionParameter )")
            console.log("[Keystore.getEntry()]: alias: " + alias + ", protection: '" + dumpProtectionParameter(protection) + "'");
            var entry = this.getEntry(alias, protection);
            console.log("[getEntry()]: Entry: " + dumpKeyStoreEntry(entry));
            return entry;
        };
    }
}
/*
* Dump all aliasses in keystores of all types(predefined in keystoreTypes)
*/
export function listaliasesstatic() {
    // BCPKCS12/PKCS12-DEF - exceptions
    var keystoreTypes = ["AndroidKeyStore", "AndroidCAStore", /*"BCPKCS12",*/ "BKS", "BouncyCastle", "PKCS12", /*"PKCS12-DEF"*/];
    keystoreTypes.forEach(function (entry) {
        console.log("[ListAliasesStatic] keystoreType: " + entry + " \nAliases: " + ListAliasesType(entry));
    });
    return "[done]";
}
/*
* Dump all aliasses in keystores of all instances obtained during app runtime.
* Instances that will be dumped are collected via hijacking Keystre.getInstance() -> hookKeystoreGetInstance()
*/
export function listaliasesruntime() {
    Java.perform(function () {
        console.log("[ListAliasesRuntime] Instances: " + keystoreList);
        keystoreList.forEach(function (entry) {
            console.log("[ListAliasesRuntime] keystoreObj: " + entry + " type: " + entry.getType() + " \n" + ListAliasesObj(entry));
        });
    });
    return "[done]";
}
// FSecureLABS
// https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/tracer-cipher.js
// https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/tracer-secretkeyfactory.js
export function dumpcryptostuff() {
    console.log("Cipher hooks loaded!");
    Java.perform(function () {
        hookCipherGetInstance();
        hookCipherGetInstance2();
        hookCipherGetInstance3();
        hookCipherInit();
        hookCipherInit2();
        hookCipherInit3();
        hookCipherInit4();
        hookCipherInit5();
        hookCipherInit6();
        hookCipherInit7();
        hookCipherInit8();
        hookDoFinal();
        hookDoFinal2();
        hookDoFinal3();
        hookDoFinal4();
        hookDoFinal5();
        hookDoFinal6();
        hookDoFinal7();
        hookUpdate();
        hookUpdate2();
        hookUpdate3();
        hookUpdate4();
        hookUpdate5();
    });
    var cipherList = [];
    var StringCls = null;
    Java.perform(function () {
        StringCls = Java.use('java.lang.String');
    });
    /*
        .overload('java.lang.String')
        .overload('java.lang.String', 'java.security.Provider')
        .overload('java.lang.String', 'java.lang.String')
    */
    function hookCipherGetInstance() {
        var cipherGetInstance = Java.use('javax.crypto.Cipher')['getInstance'].overload("java.lang.String");
        cipherGetInstance.implementation = function (type) {
            console.log("[Cipher.getInstance()]: type: " + type);
            var tmp = this.getInstance(type);
            console.log("[Cipher.getInstance()]:  cipherObj: " + tmp);
            cipherList.push(tmp);
            return tmp;
        };
    }
    function hookCipherGetInstance2() {
        var cipherGetInstance = Java.use('javax.crypto.Cipher')['getInstance'].overload('java.lang.String', 'java.security.Provider');
        cipherGetInstance.implementation = function (transforamtion, provider) {
            console.log("[Cipher.getInstance2()]: transforamtion: " + transforamtion + ",  provider: " + provider);
            var tmp = this.getInstance(transforamtion, provider);
            console.log("[Cipher.getInstance2()]:  cipherObj: " + tmp);
            cipherList.push(tmp);
            return tmp;
        };
    }
    function hookCipherGetInstance3() {
        var cipherGetInstance = Java.use('javax.crypto.Cipher')['getInstance'].overload('java.lang.String', 'java.lang.String');
        cipherGetInstance.implementation = function (transforamtion, provider) {
            console.log("[Cipher.getInstance3()]: transforamtion: " + transforamtion + ",  provider: " + provider);
            var tmp = this.getInstance(transforamtion, provider);
            console.log("[Cipher.getInstance3()]:  cipherObj: " + tmp);
            cipherList.push(tmp);
            return tmp;
        };
    }
    /*

        .overload('int', 'java.security.cert.Certificate')
        .overload('int', 'java.security.Key')
        .overload('int', 'java.security.Key', 'java.security.AlgorithmParameters')
        //.overload('int', 'java.security.Key', 'java.security.spec.AlgorithmParameterSpec')
        .overload('int', 'java.security.cert.Certificate', 'java.security.SecureRandom')
        .overload('int', 'java.security.Key', 'java.security.SecureRandom')
        .overload('int', 'java.security.Key', 'java.security.spec.AlgorithmParameterSpec', 'java.security.SecureRandom')
        .overload('int', 'java.security.Key', 'java.security.AlgorithmParameters', 'java.security.SecureRandom')
    */
    function hookCipherInit() {
        var cipherInit = Java.use('javax.crypto.Cipher')['init'].overload('int', 'java.security.cert.Certificate');
        cipherInit.implementation = function (mode, cert) {
            console.log("[Cipher.init()]: mode: " + decodeMode(mode) + ", cert: " + cert + " , cipherObj: " + this);
            var tmp = this.init(mode, cert);
        };
    }
    function hookCipherInit2() {
        var cipherInit = Java.use('javax.crypto.Cipher')['init'].overload('int', 'java.security.Key');
        cipherInit.implementation = function (mode, secretKey) {
            console.log("[Cipher.init()]: mode: " + decodeMode(mode) + ", secretKey: " + secretKey.$className + " , cipherObj: " + this);
            console.log(secretKey);
            console.log(secretKey.get());
            var tmp = this.init(mode, secretKey);
        };
    }
    function hookCipherInit3() {
        var cipherInit = Java.use('javax.crypto.Cipher')['init'].overload('int', 'java.security.Key', 'java.security.AlgorithmParameters');
        cipherInit.implementation = function (mode, secretKey, alParam) {
            console.log("[Cipher.init()]: mode: " + decodeMode(mode) + ", secretKey: " + secretKey.$className + " alParam:" + alParam + " , cipherObj: " + this);
            // Get the raw key bytes and convert to a hex string
            var keyBytes = secretKey.getEncoded();
            var keyHexString = "";
            for (var i = 0; i < keyBytes.length; i++) {
                keyHexString += ("0" + keyBytes[i].toString(16)).substr(-2);
            }
            console.log("Raw key: " + keyHexString);
            var tmp = this.init(mode, secretKey, alParam);
        };
    }
    function hookCipherInit4() {
        var cipherInit = Java.use('javax.crypto.Cipher')['init'].overload('int', 'java.security.Key', 'java.security.spec.AlgorithmParameterSpec');
        cipherInit.implementation = function (mode, secretKey, spec) {
            console.log("[Cipher.init()]: mode: " + decodeMode(mode) + ", secretKey: " + secretKey.$className + " spec:" + spec + " , cipherObj: " + this);
            // Get the raw key bytes and convert to a hex string
            var keyBytes = secretKey.getEncoded();
            var keyHexString = "";
            for (var i = 0; i < keyBytes.length; i++) {
                keyHexString += ("0" + keyBytes[i].toString(16)).substr(-2);
            }
            console.log("Raw key: " + keyHexString);
            var tmp = this.init(mode, secretKey, spec);
        };
    }
    function hookCipherInit5() {
        var cipherInit = Java.use('javax.crypto.Cipher')['init'].overload('int', 'java.security.cert.Certificate', 'java.security.SecureRandom');
        cipherInit.implementation = function (mode, cert, secureRandom) {
            console.log("[Cipher.init()]: mode: " + decodeMode(mode) + ", cert: " + cert + " secureRandom:" + secureRandom + " , cipherObj: " + this);
            // Get the raw key bytes and convert to a hex string
            var keyBytes = secretKey.getEncoded();
            var keyHexString = "";
            for (var i = 0; i < keyBytes.length; i++) {
                keyHexString += ("0" + keyBytes[i].toString(16)).substr(-2);
            }
            console.log("Raw key: " + keyHexString);
            var tmp = this.init(mode, cert, secureRandom);
        };
    }
    function hookCipherInit6() {
        var cipherInit = Java.use('javax.crypto.Cipher')['init'].overload('int', 'java.security.Key', 'java.security.SecureRandom');
        cipherInit.implementation = function (mode, secretKey, secureRandom) {
            console.log("[Cipher.init()]: mode: " + decodeMode(mode) + ", secretKey: " + secretKey.$className + " secureRandom:" + secureRandom + " , cipherObj: " + this);
            // Get the raw key bytes and convert to a hex string
            var keyBytes = secretKey.getEncoded();
            var keyHexString = "";
            for (var i = 0; i < keyBytes.length; i++) {
                keyHexString += ("0" + keyBytes[i].toString(16)).substr(-2);
            }
            console.log("Raw key: " + keyHexString);
            var tmp = this.init(mode, secretKey, secureRandom);
        };
    }
    function hookCipherInit7() {
        var cipherInit = Java.use('javax.crypto.Cipher')['init'].overload('int', 'java.security.Key', 'java.security.spec.AlgorithmParameterSpec', 'java.security.SecureRandom');
        cipherInit.implementation = function (mode, secretKey, spec, secureRandom) {
            console.log("[Cipher.init()]: mode: " + decodeMode(mode) + ", secretKey: " + secretKey.$className + " spec:" + spec + " secureRandom: " + secureRandom + " , cipherObj: " + this);
            // Get the raw key bytes and convert to a hex string
            var keyBytes = secretKey.getEncoded();
            var keyHexString = "";
            for (var i = 0; i < keyBytes.length; i++) {
                keyHexString += ("0" + keyBytes[i].toString(16)).substr(-2);
            }
            console.log("Raw key: " + keyHexString);
            var tmp = this.init(mode, secretKey, spec, secureRandom);
        };
    }
    function hookCipherInit8() {
        var cipherInit = Java.use('javax.crypto.Cipher')['init'].overload('int', 'java.security.Key', 'java.security.AlgorithmParameters', 'java.security.SecureRandom');
        cipherInit.implementation = function (mode, secretKey, alParam, secureRandom) {
            console.log("[Cipher.init()]: mode: " + decodeMode(mode) + ", secretKey: " + secretKey.$className + " alParam:" + alParam + " secureRandom: " + secureRandom + " , cipherObj: " + this);
            // Get the raw key bytes and convert to a hex string
            var keyBytes = secretKey.getEncoded();
            var keyHexString = "";
            for (var i = 0; i < keyBytes.length; i++) {
                keyHexString += ("0" + keyBytes[i].toString(16)).substr(-2);
            }
            console.log("Raw key: " + keyHexString);
            var tmp = this.init(mode, secretKey, alParam, secureRandom);
        };
    }
    /*
        .overload()
        .overload('[B')
        .overload('[B', 'int')
        .overload('java.nio.ByteBuffer', 'java.nio.ByteBuffer')
        .overload('[B', 'int', 'int')
        .overload('[B', 'int', 'int', '[B')
        .overload('[B', 'int', 'int', '[B', 'int')
    */
    function hookDoFinal() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload();
        cipherInit.implementation = function () {
            console.log("[Cipher.doFinal()]: " + "  cipherObj: " + this);
            var tmp = this.doFinal();
            dumpByteArray('Result', tmp);
            return tmp;
        };
    }
    function hookDoFinal2() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B');
        cipherInit.implementation = function (byteArr) {
            console.log("[Cipher.doFinal2()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', byteArr);
            var tmp = this.doFinal(byteArr);
            dumpByteArray('Result', tmp);
            return tmp;
        };
    }
    function hookDoFinal3() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B', 'int');
        cipherInit.implementation = function (byteArr, a1) {
            console.log("[Cipher.doFinal3()]: " + "  cipherObj: " + this);
            dumpByteArray('Out buffer', byteArr);
            var tmp = this.doFinal(byteArr, a1);
            dumpByteArray('Out buffer', byteArr);
            return tmp;
        };
    }
    function hookDoFinal4() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('java.nio.ByteBuffer', 'java.nio.ByteBuffer');
        cipherInit.implementation = function (a1, a2) {
            console.log("[Cipher.doFinal4()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', a1.array());
            var tmp = this.doFinal(a1, a2);
            dumpByteArray('Out buffer', a2.array());
            return tmp;
        };
    }
    function hookDoFinal5() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B', 'int', 'int');
        cipherInit.implementation = function (byteArr, a1, a2) {
            console.log("[Cipher.doFinal5()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', byteArr);
            var tmp = this.doFinal(byteArr, a1, a2);
            dumpByteArray('Out buffer', tmp);
            return tmp;
        };
    }
    function hookDoFinal6() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B', 'int', 'int', '[B');
        cipherInit.implementation = function (byteArr, a1, a2, outputArr) {
            console.log("[Cipher.doFinal6()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', byteArr);
            var tmp = this.doFinal(byteArr, a1, a2, outputArr);
            dumpByteArray('Out buffer', outputArr);
            return tmp;
        };
    }
    function hookDoFinal7() {
        var cipherInit = Java.use('javax.crypto.Cipher')['doFinal'].overload('[B', 'int', 'int', '[B', 'int');
        cipherInit.implementation = function (byteArr, a1, a2, outputArr, a4) {
            console.log("[Cipher.doFinal7()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', byteArr);
            var tmp = this.doFinal(byteArr, a1, a2, outputArr, a4);
            dumpByteArray('Out buffer', outputArr);
            return tmp;
        };
    }
    /*
        .overload('[B')
        .overload('java.nio.ByteBuffer', 'java.nio.ByteBuffer')
        .overload('[B', 'int', 'int')
        .overload('[B', 'int', 'int', '[B')
        .overload('[B', 'int', 'int', '[B', 'int')
    */
    function hookUpdate() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('[B');
        cipherInit.implementation = function (byteArr) {
            console.log("[Cipher.update()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', byteArr);
            var tmp = this.update(byteArr);
            dumpByteArray('Out buffer', tmp);
            return tmp;
        };
    }
    function hookUpdate2() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('java.nio.ByteBuffer', 'java.nio.ByteBuffer');
        cipherInit.implementation = function (byteArr, outputArr) {
            console.log("[Cipher.update2()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', byteArr.array());
            var tmp = this.update(byteArr, outputArr);
            dumpByteArray('Out buffer', outputArr.array());
            return tmp;
        };
    }
    function hookUpdate3() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('[B', 'int', 'int');
        cipherInit.implementation = function (byteArr, a1, a2) {
            console.log("[Cipher.update3()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', byteArr);
            var tmp = this.update(byteArr, a1, a2);
            dumpByteArray('Out buffer', tmp);
            return tmp;
        };
    }
    function hookUpdate4() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('[B', 'int', 'int', '[B');
        cipherInit.implementation = function (byteArr, a1, a2, outputArr) {
            console.log("[Cipher.update4()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', byteArr);
            var tmp = this.update(byteArr, a1, a2, outputArr);
            dumpByteArray('Out buffer', outputArr);
            return tmp;
        };
    }
    function hookUpdate5() {
        var cipherInit = Java.use('javax.crypto.Cipher')['update'].overload('[B', 'int', 'int', '[B', 'int');
        cipherInit.implementation = function (byteArr, a1, a2, outputArr, a4) {
            console.log("[Cipher.update5()]: " + "  cipherObj: " + this);
            dumpByteArray('In buffer', byteArr);
            var tmp = this.update(byteArr, a1, a2, outputArr, a4);
            dumpByteArray('Out buffer', outputArr);
            return tmp;
        };
    }
    function decodeMode(mode) {
        if (mode == 1)
            return "Encrypt mode";
        else if (mode == 2)
            return "Decrypt mode";
        else if (mode == 3)
            return "Wrap mode";
        else if (mode == 4)
            return "Unwrap mode";
    }
    /* All below is hexdump implementation, changed in order to encode in Base64 */
    function dumpByteArray(title, byteArr) {
        if (byteArr != null) {
            try {
                var buff = new ArrayBuffer(byteArr.length);
                var dtv = new DataView(buff);
                for (var i = 0; i < byteArr.length; i++) {
                    dtv.setUint8(i, byteArr[i]); // Frida sucks sometimes and returns different byteArr.length between ArrayBuffer(byteArr.length) and for(..; i < byteArr.length;..). It occured even when Array.copyOf was done to work on copy.
                }
                console.log(title + ":\n");
                //console.log(hexdumpJS(dtv.buffer, 0, byteArr.length))
                console.log(base64ArrayBuffer(dtv.buffer));
            }
            catch (error) {
                console.log("Exception has occured in hexdump");
            }
        }
        else {
            console.log("byteArr is null!");
        }
    }
    function base64ArrayBuffer(arrayBuffer) {
        var base64 = '';
        var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        var bytes = new Uint8Array(arrayBuffer);
        var byteLength = bytes.byteLength;
        var byteRemainder = byteLength % 3;
        var mainLength = byteLength - byteRemainder;
        var a, b, c, d;
        var chunk;
        // Main loop deals with bytes in chunks of 3
        for (var i = 0; i < mainLength; i = i + 3) {
            // Combine the three bytes into a single integer
            chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
            // Use bitmasks to extract 6-bit segments from the triplet
            a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
            b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12
            c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6
            d = chunk & 63; // 63       = 2^6 - 1
            // Convert the raw binary segments to the appropriate ASCII encoding
            base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
        }
        // Deal with the remaining bytes and padding
        if (byteRemainder == 1) {
            chunk = bytes[mainLength];
            a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2
            // Set the 4 least significant bits to zero
            b = (chunk & 3) << 4; // 3   = 2^2 - 1
            base64 += encodings[a] + encodings[b] + '==';
        }
        else if (byteRemainder == 2) {
            chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];
            a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
            b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4
            // Set the 2 least significant bits to zero
            c = (chunk & 15) << 2; // 15    = 2^4 - 1
            base64 += encodings[a] + encodings[b] + encodings[c] + '=';
        }
        return base64;
    }
    /*
        PBEKeySpec tracer allows to see parameters (including password) from which PBKDF keys are generated
    */
    Java.perform(function () {
        //hookSecretKeyFactory_getInstance();
        hookPBEKeySpec();
        hookPBEKeySpec2();
        hookPBEKeySpec3();
    });
    console.log("SecretKeyFactory hooks loaded!");
    var cipherList = [];
    var StringCls = null;
    Java.perform(function () {
        StringCls = Java.use('java.lang.String');
    });
    function hookSecretKeyFactory_getInstance() {
        var func = Java.use('javax.crypto.SecretKeyFactory')['getInstance'];
        func.implementation = function (flag) {
            console.log("[SecretKeyFactory.getInstance()]: flag: " + flag);
            return this.getInstance(flag);
        };
    }
    /*
        .overload('[C')
        .overload('[C', '[B', 'int')
        .overload('[C', '[B', 'int', 'int')
    */
    function hookPBEKeySpec() {
        var PBEKeySpec = Java.use('javax.crypto.spec.PBEKeySpec')['$init'].overload('[C');
        PBEKeySpec.implementation = function (pass) {
            console.log("[PBEKeySpec.PBEKeySpec()]: pass: " + charArrayToString(pass));
            return this.$init(pass);
        };
    }
    function hookPBEKeySpec2() {
        var PBEKeySpec = Java.use('javax.crypto.spec.PBEKeySpec')['$init'].overload('[C', '[B', 'int');
        PBEKeySpec.implementation = function (pass, salt, iter) {
            console.log("[PBEKeySpec.PBEKeySpec2()]: pass: " + charArrayToString(pass) + " iter: " + iter);
            dumpByteArray("salt", salt);
            return this.$init(pass, salt, iter);
        };
    }
    function hookPBEKeySpec3() {
        var PBEKeySpec = Java.use('javax.crypto.spec.PBEKeySpec')['$init'].overload('[C', '[B', 'int', 'int');
        PBEKeySpec.implementation = function (pass, salt, iter, keyLength) {
            console.log("[PBEKeySpec.PBEKeySpec3()]: pass: " + charArrayToString(pass) + " iter: " + iter + " keyLength: " + keyLength);
            dumpByteArray("salt", salt);
            return this.$init(pass, salt, iter, keyLength);
        };
    }
    function charArrayToString(charArray) {
        if (charArray == null)
            return '(null)';
        else
            return StringCls.$new(charArray);
    }
}
function auxiliary_android_pinning_hooks() {
    var okhttp3_CertificatePinner_class = null;
    try {
        okhttp3_CertificatePinner_class = Java.use('okhttp3.CertificatePinner');
    }
    catch (err) {
        console.log('[-] OkHTTPv3 CertificatePinner class not found. Skipping.');
        okhttp3_CertificatePinner_class = null;
    }
    if (okhttp3_CertificatePinner_class != null) {
        try {
            okhttp3_CertificatePinner_class.check.overload('java.lang.String', 'java.util.List').implementation = function (str, list) {
                console.log('[+] Bypassing OkHTTPv3 1: ' + str);
                return true;
            };
            console.log('[+] Loaded OkHTTPv3 hook 1');
        }
        catch (err) {
            console.log('[-] Skipping OkHTTPv3 hook 1');
        }
        try {
            okhttp3_CertificatePinner_class.check.overload('java.lang.String', 'java.security.cert.Certificate').implementation = function (str, cert) {
                console.log('[+] Bypassing OkHTTPv3 2: ' + str);
                return true;
            };
            console.log('[+] Loaded OkHTTPv3 hook 2');
        }
        catch (err) {
            console.log('[-] Skipping OkHTTPv3 hook 2');
        }
        try {
            okhttp3_CertificatePinner_class.check.overload('java.lang.String', '[Ljava.security.cert.Certificate;').implementation = function (str, cert_array) {
                console.log('[+] Bypassing OkHTTPv3 3: ' + str);
                return true;
            };
            console.log('[+] Loaded OkHTTPv3 hook 3');
        }
        catch (err) {
            console.log('[-] Skipping OkHTTPv3 hook 3');
        }
        try {
            okhttp3_CertificatePinner_class['check$okhttp'].implementation = function (str, obj) {
                console.log('[+] Bypassing OkHTTPv3 4 (4.2+): ' + str);
            };
            console.log('[+] Loaded OkHTTPv3 hook 4 (4.2+)');
        }
        catch (err) {
            console.log('[-] Skipping OkHTTPv3 hook 4 (4.2+)');
        }
    }
    // Trustkit (triple bypass)
    var trustkit_Activity = null;
    try {
        trustkit_Activity = Java.use('com.datatheorem.android.trustkit.pinning.OkHostnameVerifier');
        console.log('[+] Setup Trustkit pinning (first class)');
    }
    catch (err) {
        console.log('[-] Trustkit first class not found. Skipping.');
        trustkit_Activity = null;
    }
    if (trustkit_Activity != null) {
        try {
            trustkit_Activity.verify.overload('java.lang.String', 'javax.net.ssl.SSLSession').implementation = function (str, b) {
                console.log('[+] Intercepted Trustkit {1}: ' + str);
                return true;
            };
        }
        catch (err) {
            console.log('[-] Skipping Trustkit {1}');
        }
        try {
            trustkit_Activity.verify.overload('java.lang.String', 'java.security.cert.X509Certificate').implementation = function (str, b) {
                console.log('[+] Intercepted Trustkit {2}: ' + str);
                return true;
            };
        }
        catch (err) {
            console.log('[-] Skipping Trustkit {2}');
        }
    }
    try {
        var trustkit_PinningTrustManager = Java.use('com.datatheorem.android.trustkit.pinning.PinningTrustManager');
        trustkit_PinningTrustManager.checkServerTrusted.implementation = function () {
            console.log('[+] Intercepted Trustkit {3}');
        };
        console.log('[+] Setup Trustkit pinning (second class)');
    }
    catch (err) {
        console.log('[-] Trustkit second class not found. Skipping.');
    }
    // TrustManagerImpl (Android > 7)
    try {
        var TrustManagerImpl = Java.use('com.android.org.conscrypt.TrustManagerImpl');
        TrustManagerImpl.verifyChain.implementation = function (untrustedChain, trustAnchorChain, host, clientAuth, ocspData, tlsSctData) {
            console.log('[+] Intercepted TrustManagerImpl (Android > 7): ' + host);
            return untrustedChain;
        };
        console.log('[+] Setup TrustManagerImpl (Android > 7) pinning');
    }
    catch (err) {
        console.log('[-] TrustManagerImpl (Android > 7) pinner not found');
    }
    // Appcelerator Titanium
    try {
        var appcelerator_PinningTrustManager = Java.use('appcelerator.https.PinningTrustManager');
        appcelerator_PinningTrustManager.checkServerTrusted.implementation = function () {
            console.log('[+] Intercepted Appcelerator');
        };
        console.log('[+] Setup Appcelerator pinning');
    }
    catch (err) {
        console.log('[-] Appcelerator pinner not found');
    }
    // OpenSSLSocketImpl
    try {
        var OpenSSLSocketImpl = Java.use('com.android.org.conscrypt.OpenSSLSocketImpl');
        OpenSSLSocketImpl.verifyCertificateChain.implementation = function (certRefs, authMethod) {
            console.log('[+] Intercepted OpenSSLSocketImpl');
        };
        console.log('[+] Setup OpenSSLSocketImpl pinning');
    }
    catch (err) {
        console.log('[-] OpenSSLSocketImpl pinner not found');
    }
    // PhoneGap sslCertificateChecker (https://github.com/EddyVerbruggen/)
    try {
        var phonegap_Activity = Java.use('nl.xservices.plugins.sslCertificateChecker');
        phonegap_Activity.execute.overload('java.lang.String', 'org.json.JSONArray', 'org.apache.cordova.CallbackContext').implementation = function (str) {
            console.log('[+] Intercepted PhoneGap sslCertificateChecker: ' + str);
            return true;
        };
        console.log('[+] Setup PhoneGap sslCertificateChecker pinning');
    }
    catch (err) {
        console.log('[-] PhoneGap sslCertificateChecker pinner not found');
    }
    // IBM MobileFirst pinTrustedCertificatePublicKey
    try {
        var WLClient = Java.use('com.worklight.wlclient.api.WLClient');
        // if above does not works try with this
        //var WLClient = Java.use('com.worklight.wlclient.api.WLClient.getInstance()');
        WLClient.pinTrustedCertificatePublicKey.implementation = function (cert) {
            console.log('[+] Intercepted IBM MobileFirst pinTrustedCertificatePublicKey');
            return;
        };
        console.log('[+] Setup IBM MobileFirst pinTrustedCertificatePublicKey pinning');
    }
    catch (err) {
        console.log('[-] IBM MobileFirst pinTrustedCertificatePublicKey pinner not found');
    }
    // IBM WorkLight (ancestor of MobileFirst) HostNameVerifierWithCertificatePinning (quadruple bypass)
    var worklight_Activity = null;
    try {
        worklight_Activity = Java.use('com.worklight.wlclient.certificatepinning.HostNameVerifierWithCertificatePinning');
    }
    catch (err) {
        console.log('[-] IBM WorkLight HostNameVerifierWithCertificatePinning class not found. Skipping.');
        worklight_Activity = null;
    }
    if (worklight_Activity != null) {
        try {
            worklight_Activity.verify.overload('java.lang.String', 'javax.net.ssl.SSLSocket').implementation = function (str, b) {
                console.log('[+] Intercepted IBM WorkLight HostNameVerifierWithCertificatePinning {1}: ' + str);
                return;
            };
        }
        catch (err) {
            console.log('[-] Skipping IBM WorkLight hook 1');
        }
        try {
            worklight_Activity.verify.overload('java.lang.String', 'java.security.cert.X509Certificate').implementation = function (str, b) {
                console.log('[+] Intercepted IBM WorkLight HostNameVerifierWithCertificatePinning {2}: ' + str);
                return;
            };
        }
        catch (err) {
            console.log('[-] Skipping IBM WorkLight hook 2');
        }
        try {
            worklight_Activity.verify.overload('java.lang.String', 'java.util.List', 'java.util.List').implementation = function (str, b, c) {
                console.log('[+] Intercepted IBM WorkLight HostNameVerifierWithCertificatePinning {3}: ' + str);
                return;
            };
        }
        catch (err) {
            console.log('[-] Skipping IBM WorkLight hook 3');
        }
        try {
            worklight_Activity.verify.overload('java.lang.String', 'javax.net.ssl.SSLSession').implementation = function (str, b) {
                console.log('[+] Intercepted IBM WorkLight HostNameVerifierWithCertificatePinning {4}: ' + str);
                return true;
            };
        }
        catch (err) {
            console.log('[-] Skipping IBM WorkLight hook 4');
        }
        console.log('[+] Setup IBM WorkLight HostNameVerifierWithCertificatePinning pinning');
    }
}
// Auxiliary functions for keystore hooks/functions
function dumpProtectionParameter(protection) {
    if (protection != null) {
        // android.security.keystore.KeyProtection, java.security.KeyStore.CallbackHandlerProtection, java.security.KeyStore.PasswordProtection, android.security.KeyStoreParameter 
        var protectionCls = protection.$className;
        if (protectionCls.localeCompare("android.security.keystore.KeyProtection") == 0) {
            return "" + protectionCls + " [implement dumping if needed]";
        }
        else if (protectionCls.localeCompare("java.security.KeyStore.CallbackHandlerProtection") == 0) {
            return "" + protectionCls + " [implement dumping if needed]";
        }
        else if (protectionCls.localeCompare("java.security.KeyStore.PasswordProtection") == 0) {
            getPasswordMethod = Java.use('java.security.KeyStore.PasswordProtection')['getPassword'];
            password = getPasswordMethod.call(protection);
            return "password: " + charArrayToString(password);
        }
        else if (protectionCls.localeCompare("android.security.KeyStoreParameter") == 0) {
            isEncryptionRequiredMethod = Java.use('android.security.KeyStoreParameter')['isEncryptionRequired'];
            result = isEncryptionRequiredMethod.call(protection);
            return "isEncryptionRequired: " + result;
        }
        else
            return "Unknown protection parameter type: " + protectionCls;
    }
    else
        return "null";
}
function dumpKeyStoreEntry(entry) {
    // java.security.KeyStore$PrivateKeyEntry, java.security.KeyStore$SecretKeyEntry, java.security.KeyStore$TrustedCertificateEntry, android.security.WrappedKeyEntry 
    if (entry != null) {
        var entryCls = entry.$className;
        var castedEntry = Java.cast(entry, Java.use(entryCls));
        if (entryCls.localeCompare("java.security.KeyStore$PrivateKeyEntry") == 0) {
            var getPrivateKeyEntryMethod = Java.use('java.security.KeyStore$PrivateKeyEntry')['getPrivateKey'];
            var key = getPrivateKeyEntryMethod.call(castedEntry);
            return "" + entryCls + " [implement key dumping if needed] " + key.$className;
        }
        else if (entryCls.localeCompare("java.security.KeyStore$SecretKeyEntry") == 0) {
            var getSecretKeyMethod = Java.use('java.security.KeyStore$SecretKeyEntry')['getSecretKey'];
            var key = getSecretKeyMethod.call(castedEntry);
            var keyGetFormatMethod = Java.use(key.$className)['getFormat'];
            var keyGetEncodedMethod = Java.use(key.$className)['getEncoded'];
            //console.log(""+key.$className);
            if (key.$className.localeCompare("android.security.keystore.AndroidKeyStoreSecretKey") == 0)
                return "keyClass: android.security.keystore.AndroidKeyStoreSecretKey can't dump";
            return "keyFormat: " + keyGetFormatMethod.call(key) + ", encodedKey: '" + keyGetEncodedMethod.call(key) + "', key: " + key;
        }
        else if (entryCls.localeCompare("java.security.KeyStore$TrustedCertificateEntry") == 0) {
            return "" + entryCls + " [implement key dumping if needed]";
        }
        else if (entryCls.localeCompare("android.security.WrappedKeyEntry") == 0) {
            return "" + entryCls + " [implement key dumping if needed]";
        }
        else
            return "Unknown key entry type: " + entryCls;
    }
    else
        return "null";
}
/*
* Dump all aliasses in keystore of given 'type'.
* Example: ListAliasesType('AndroidKeyStore');
*/
function ListAliasesType(type) {
    var result = [];
    Java.perform(function () {
        var keyStoreCls = Java.use('java.security.KeyStore');
        var keyStoreObj = keyStoreCls.getInstance(type);
        keyStoreObj.load(null);
        var aliases = keyStoreObj.aliases();
        //console.log("aliases: " + aliases.getClass());
        while (aliases.hasMoreElements()) {
            result.push("'" + aliases.nextElement() + "'");
        }
    });
    return result;
}
/*
* Dump all aliasses for a given keystore object.
* Example: ListAliasesObj(keystoreObj);
*/
function ListAliasesObj(obj) {
    var result = [];
    Java.perform(function () {
        var aliases = obj.aliases();
        while (aliases.hasMoreElements()) {
            result.push(aliases.nextElement() + "");
        }
    });
    return result;
}
/*
* Retrieve keystore instance from keystoreList
* Example: GetKeyStore("KeyStore...@af102a");
*/
function GetKeyStore(keystoreName) {
    var result = null;
    Java.perform(function () {
        for (var i = 0; i < keystoreList.length; i++) {
            if (keystoreName.localeCompare("" + keystoreList[i]) == 0)
                result = keystoreList[i];
        }
    });
    return result;
}
/*
* Dump keystore key properties in JSON object
* Example: AliasInfo('secret');
*/
function AliasInfo(keyAlias) {
    var result = {};
    Java.perform(function () {
        var keyStoreCls = Java.use('java.security.KeyStore');
        var keyFactoryCls = Java.use('java.security.KeyFactory');
        var keyInfoCls = Java.use('android.security.keystore.KeyInfo');
        var keySecretKeyFactoryCls = Java.use('javax.crypto.SecretKeyFactory');
        var keyFactoryObj = null;
        var keyStoreObj = keyStoreCls.getInstance('AndroidKeyStore');
        keyStoreObj.load(null);
        var key = keyStoreObj.getKey(keyAlias, null);
        if (key == null) {
            console.log('key does not exist');
            return null;
        }
        try {
            keyFactoryObj = keyFactoryCls.getInstance(key.getAlgorithm(), 'AndroidKeyStore');
        }
        catch (err) {
            keyFactoryObj = keySecretKeyFactoryCls.getInstance(key.getAlgorithm(), 'AndroidKeyStore');
        }
        var keyInfo = keyFactoryObj.getKeySpec(key, keyInfoCls.class);
        result.keyAlgorithm = key.getAlgorithm();
        result.keySize = keyInfoCls['getKeySize'].call(keyInfo);
        result.blockModes = keyInfoCls['getBlockModes'].call(keyInfo);
        result.digests = keyInfoCls['getDigests'].call(keyInfo);
        result.encryptionPaddings = keyInfoCls['getEncryptionPaddings'].call(keyInfo);
        result.keyValidityForConsumptionEnd = keyInfoCls['getKeyValidityForConsumptionEnd'].call(keyInfo);
        if (result.keyValidityForConsumptionEnd != null)
            result.keyValidityForConsumptionEnd = result.keyValidityForConsumptionEnd.toString();
        result.keyValidityForOriginationEnd = keyInfoCls['getKeyValidityForOriginationEnd'].call(keyInfo);
        if (result.keyValidityForOriginationEnd != null)
            result.keyValidityForOriginationEnd = result.keyValidityForOriginationEnd.toString();
        result.keyValidityStart = keyInfoCls['getKeyValidityStart'].call(keyInfo);
        if (result.keyValidityStart != null)
            result.keyValidityStart = result.keyValidityStart.toString();
        result.keystoreAlias = keyInfoCls['getKeystoreAlias'].call(keyInfo);
        result.origin = keyInfoCls['getOrigin'].call(keyInfo);
        result.purposes = keyInfoCls['getPurposes'].call(keyInfo);
        result.signaturePaddings = keyInfoCls['getSignaturePaddings'].call(keyInfo);
        result.userAuthenticationValidityDurationSeconds = keyInfoCls['getUserAuthenticationValidityDurationSeconds'].call(keyInfo);
        result.isInsideSecureHardware = keyInfoCls['isInsideSecureHardware'].call(keyInfo);
        result.isInvalidatedByBiometricEnrollment = keyInfoCls['isInvalidatedByBiometricEnrollment'].call(keyInfo);
        try {
            result.isTrustedUserPresenceRequired = keyInfoCls['isTrustedUserPresenceRequired'].call(keyInfo);
        }
        catch (err) { }
        result.isUserAuthenticationRequired = keyInfoCls['isUserAuthenticationRequired'].call(keyInfo);
        result.isUserAuthenticationRequirementEnforcedBySecureHardware = keyInfoCls['isUserAuthenticationRequirementEnforcedBySecureHardware'].call(keyInfo);
        result.isUserAuthenticationValidWhileOnBody = keyInfoCls['isUserAuthenticationValidWhileOnBody'].call(keyInfo);
        try {
            result.isUserConfirmationRequired = keyInfoCls['isUserConfirmationRequired'].call(keyInfo);
        }
        catch (err) { }
        //console.log(" result: " + JSON.stringify(result));
        //console.log("aliases: " + aliases.getClass());
    });
    return result;
}
/* following function reads an InputStream and returns an ASCII char representation of it */
function readStreamToHex(stream) {
    var data = [];
    var byteRead = stream.read();
    while (byteRead != -1) {
        data.push(('0' + (byteRead & 0xFF).toString(16)).slice(-2));
        /* <---------------- binary to hex ---------------> */
        byteRead = stream.read();
    }
    stream.close();
    return data.join('');
}
function charArrayToString(charArray) {
    if (charArray == null)
        return '(null)';
    else
        return StringCls.$new(charArray);
}
âœ„
{"version":3,"file":"bridaFunctions.js","sourceRoot":"/Users/martinjakobsson/","sources":["Rearchero/Brida/bridaFunctions.js"],"names":[],"mappings":"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"}
âœ„
export function getallclasses() {
    var result = [];
    if (ObjC.available) {
        for (var className in ObjC.classes) {
            if (ObjC.classes.hasOwnProperty(className)) {
                result.push(className);
            }
        }
    }
    else if (Java.available) {
        Java.perform(function () {
            Java.enumerateLoadedClasses({
                onMatch: function (className) {
                    result.push(className);
                },
                onComplete: function () {
                }
            });
        });
    }
    return result;
}
export function getallmodules() {
    var results = {};
    var matches = Process.enumerateModules({
        onMatch: function (module) {
            results[module['name']] = module['base'];
        },
        onComplete: function () {
        }
    });
    return results;
}
export function getmoduleimports(importname) {
    var results = {};
    var matches = Module.enumerateImports(importname, {
        onMatch: function (module) {
            results[module['type'] + ": " + module['name']] = module['address'];
        },
        onComplete: function () {
        }
    });
    return results;
}
export function getmoduleexports(exportname) {
    var results = {};
    var matches = Module.enumerateExports(exportname, {
        onMatch: function (module) {
            results[module['type'] + ": " + module['name']] = module['address'];
        },
        onComplete: function () {
        }
    });
    return results;
}
export function getclassmethods(classname) {
    var results = {};
    if (ObjC.available) {
        var resolver = new ApiResolver("objc");
        var matches = resolver.enumerateMatches("*[" + classname + " *]", {
            onMatch: function (match) {
                results[match['name']] = match['address'];
            },
            onComplete: function () {
            }
        });
    }
    else if (Java.available) {
        Java.perform(function () {
            results = getJavaMethodArgumentTypes(classname);
        });
    }
    return results;
}
export function findjavamethods(searchstring) {
    var results = {};
    if (Java.available) {
        Java.perform(function () {
            var groups = [];
            groups.push(Java.enumerateMethods('*' + searchstring + '*!*/s'));
            groups.push(Java.enumerateMethods('*!*' + searchstring + '*/s'));
            groups.forEach(g => {
                g.forEach(classLoader => {
                    classLoader.classes.forEach(c => {
                        var className = c.name;
                        c.methods.forEach(m => {
                            var methodSignature = className + "!" + m;
                            results[methodSignature] = null;
                        });
                    });
                });
            });
        });
    }
    return results;
}
export function findobjcmethods(searchstring) {
    var results = {};
    var resolver = new ApiResolver("objc");
    var matches = resolver.enumerateMatches("*[*" + searchstring + "* *]", {
        onMatch: function (match) {
            results[match['name']] = match['address'];
        },
        onComplete: function () {
        }
    });
    matches = resolver.enumerateMatches("*[* *" + searchstring + "*]", {
        onMatch: function (match) {
            results[match['name']] = match['address'];
        },
        onComplete: function () {
        }
    });
    return results;
}
export function findimports(searchstring) {
    var results = {};
    var resolver = new ApiResolver("module");
    var matches = resolver.enumerateMatches("imports:*" + searchstring + "*!*", {
        onMatch: function (match) {
            results[match['name']] = match['address'];
        },
        onComplete: function () {
        }
    });
    matches = resolver.enumerateMatches("imports:*!*" + searchstring + "*", {
        onMatch: function (match) {
            results[match['name']] = match['address'];
        },
        onComplete: function () {
        }
    });
    return results;
}
export function findexports(searchstring) {
    var results = {};
    var resolver = new ApiResolver("module");
    var matches = resolver.enumerateMatches("exports:*" + searchstring + "*!*", {
        onMatch: function (match) {
            results[match['name']] = match['address'];
        },
        onComplete: function () {
        }
    });
    matches = resolver.enumerateMatches("exports:*!*" + searchstring + "*", {
        onMatch: function (match) {
            results[match['name']] = match['address'];
        },
        onComplete: function () {
        }
    });
    return results;
}
export function detachall() {
    Interceptor.detachAll();
}
// generic trace
export function trace(pattern, type, backtrace) {
    // SINGLE EXPORT (ALL EXPORT OF A MODULE CAN BE A MESS AND CRASH THE APP)
    if (type == "export") {
        var res = new ApiResolver("module");
        pattern = "exports:" + pattern;
        var matches = res.enumerateMatchesSync(pattern);
        var targets = uniqBy(matches, JSON.stringify);
        targets.forEach(function (target) {
            traceModule(target.address, target.name, backtrace);
        });
        //OBJC
    }
    else if (type.startsWith("objc")) {
        if (ObjC.available) {
            var res;
            if (type === "objc_class") {
                res = new ApiResolver("objc");
                pattern = "*[" + pattern + " *]";
            }
            else if (type === "objc_method") {
                res = new ApiResolver("objc");
            }
            var matches = res.enumerateMatchesSync(pattern);
            var targets = uniqBy(matches, JSON.stringify);
            targets.forEach(function (target) {
                traceObjC(target.address, target.name, backtrace);
            });
        }
        // ANDROID
    }
    else if (type.startsWith("java")) {
        if (Java.available) {
            Java.perform(function () {
                if (type === "java_class") {
                    var methodsDictionary = getJavaMethodArgumentTypes(pattern);
                    var targets = Object.keys(methodsDictionary);
                    targets.forEach(function (targetMethod) {
                        traceJavaMethod(targetMethod, backtrace);
                    });
                }
                else {
                    traceJavaMethod(pattern, backtrace);
                }
            });
        }
    }
}
export function changereturnvalue(pattern, type, typeret, newret) {
    if (ObjC.available) {
        changeReturnValueIOS(pattern, type, typeret, newret);
    }
    else if (Java.available) {
        Java.perform(function () {
            changeReturnValueAndroid(pattern, type, typeret, newret);
        });
    }
    else {
        changeReturnValueGeneric(pattern, type, typeret, newret);
    }
}
export function getplatform() {
    if (Java.available) {
        return 0;
    }
    else if (ObjC.available) {
        return 1;
    }
    else {
        return 2;
    }
}
/*
This method is used to get Java methods with arguments in bytecode syntex. By simply calling the getDeclaredMethods of a Java Class object
and then calling toString on each Method object we do not get types in bytecode format. For example we get 'byte[]' instead of
'[B'. This function uses overload object of frida to get types in correct bytecode form.
*/
function getJavaMethodArgumentTypes(classname) {
    if (Java.available) {
        var results = {};
        Java.perform(function () {
            var hook = Java.use(classname);
            var res = hook.class.getDeclaredMethods();
            res.forEach(function (s) {
                //console.log("s " + s);
                var targetClassMethod = parseJavaMethod(s.toString());
                //console.log("targetClassMethod " + targetClassMethod);
                var delim = targetClassMethod.lastIndexOf(".");
                if (delim === -1)
                    return;
                var targetClass = targetClassMethod.slice(0, delim);
                var targetMethod = targetClassMethod.slice(delim + 1, targetClassMethod.length);
                //console.log("targetClass " + targetClass);
                //console.log("targetMethod " + targetMethod);
                var hookClass = Java.use(targetClass);
                var classMethodOverloads = hookClass[targetMethod].overloads;
                classMethodOverloads.forEach(function (cmo) {
                    // overload.argumentTypes is an array of objects representing the arguments. In the "className" field of each object there 
                    // is the bytecode form of the class of the current argument 
                    var argumentTypes = cmo.argumentTypes;
                    var argumentTypesArray = [];
                    argumentTypes.forEach(function (cmo) {
                        argumentTypesArray.push(cmo.className);
                    });
                    var argumentTypesString = argumentTypesArray.toString();
                    // overload.returnType.className contain the bytecode form of the class of the return value
                    var currentReturnType = cmo.returnType.className;
                    var newPattern = currentReturnType + " " + targetClassMethod + "(" + argumentTypesString + ")";
                    //console.log(newPattern);
                    results[newPattern] = 0;
                });
                hookClass.$dispose;
            });
            hook.$dispose;
        });
        return results;
    }
}
function changeReturnValueIOS(pattern, type, typeret, newret) {
    var res;
    if (type === "objc_method") {
        res = new ApiResolver("objc");
    }
    else {
        // SINGLE EXPORT
        res = new ApiResolver("module");
        pattern = "exports:" + pattern;
    }
    var matches = res.enumerateMatchesSync(pattern);
    var targets = uniqBy(matches, JSON.stringify);
    targets.forEach(function (target) {
        Interceptor.attach(target.address, {
            onEnter: function (args) {
            },
            onLeave: function (retval) {
                if (typeret === "String") {
                    var a1 = ObjC.classes.NSString.stringWithString_(newret);
                    try {
                        console.log("*** " + pattern + " Replacing " + ObjC.Object(retval) + " with " + a1);
                    }
                    catch (err) {
                        console.log("*** " + pattern + " Replacing " + retval + " with " + a1);
                    }
                    retval.replace(a1);
                }
                else if (typeret === "Ptr") {
                    console.log("*** " + pattern + " Replacing " + ptr(retval) + " with " + ptr(newret));
                    retval.replace(ptr(newret));
                }
                else if (typeret === "Boolean") {
                    if (newret === "true") {
                        var toRet = 1;
                    }
                    else {
                        var toRet = 0;
                    }
                    console.log("*** " + pattern + " Replacing " + retval + " with " + toRet);
                    retval.replace(toRet);
                }
                else {
                    console.log("*** " + pattern + " Replacing " + retval + " with " + newret);
                    retval.replace(newret);
                }
            }
        });
    });
    console.log("*** Replacing return value of " + pattern + " with " + newret);
}
function changeReturnValueGeneric(pattern, type, typeret, newret) {
    var res = new ApiResolver("module");
    pattern = "exports:" + pattern;
    var matches = res.enumerateMatchesSync(pattern);
    var targets = uniqBy(matches, JSON.stringify);
    targets.forEach(function (target) {
        Interceptor.attach(target.address, {
            onEnter: function (args) {
            },
            onLeave: function (retval) {
                if (typeret === "Ptr") {
                    console.log("*** " + pattern + " Replacing " + ptr(retval) + " with " + ptr(newret));
                    retval.replace(ptr(newret));
                }
                else if (typeret === "Boolean") {
                    if (newret === "true") {
                        var toRet = 1;
                    }
                    else {
                        var toRet = 0;
                    }
                    console.log("*** " + pattern + " Replacing " + retval + " with " + toRet);
                    retval.replace(toRet);
                }
                else {
                    console.log("*** " + pattern + " Replacing " + retval + " with " + newret);
                    retval.replace(newret);
                }
            }
        });
    });
    console.log("*** Replacing return value of " + pattern + " with " + newret);
}
function changeReturnValueAndroid(pattern, type, typeret, newret) {
    if (type === "java_method") {
        var targetClassMethod = parseJavaMethod(pattern);
        //console.log(targetClassMethod);
        var argsTargetClassMethod = getJavaMethodArguments(pattern);
        //console.log(argsTargetClassMethod);
        var delim = targetClassMethod.lastIndexOf(".");
        if (delim === -1)
            return;
        var targetClass = targetClassMethod.slice(0, delim);
        var targetMethod = targetClassMethod.slice(delim + 1, targetClassMethod.length);
        //console.log(targetClass);
        //console.log(targetMethod);
        var hook = Java.use(targetClass);
        hook[targetMethod].overload.apply(hook[targetMethod], argsTargetClassMethod).implementation = function () {
            var retval = this[targetMethod].apply(this, arguments);
            var toRet = newret;
            if (typeret === "String") {
                var stringClass = Java.use("java.lang.String");
                toRet = stringClass.$new(newret);
            }
            else if (typeret === "Ptr") {
                toRet = ptr(newret);
            }
            else if (typeret === "Boolean") {
                if (newret === "true") {
                    toRet = true;
                }
                else {
                    toRet = false;
                }
            }
            console.log("*** " + pattern + " Replacing " + retval + " with " + toRet);
            return toRet;
        };
        // SINGLE EXPORT
    }
    else {
        var res = new ApiResolver("module");
        var pattern = "exports:" + pattern;
        var matches = res.enumerateMatchesSync(pattern);
        var targets = uniqBy(matches, JSON.stringify);
        targets.forEach(function (target) {
            Interceptor.attach(target.address, {
                onEnter: function (args) {
                },
                onLeave: function (retval) {
                    var toRet = newret;
                    if (typeret === "String") {
                        var stringClass = Java.use("java.lang.String");
                        var toRet = stringClass.$new(newret);
                    }
                    else if (typeret === "ptr") {
                        toRet = ptr(newret);
                    }
                    else if (typeret === "Boolean") {
                        if (newret === "true") {
                            var toRet = 1;
                        }
                        else {
                            var toRet = 0;
                        }
                        console.log("*** " + pattern + " Replacing " + retval + " with " + toRet);
                        retval.replace(toRet);
                    }
                    console.log("*** " + pattern + " Replacing " + retval + " with " + toRet);
                    retval.replace(toRet);
                }
            });
        });
    }
    console.log("*** Replacing return value of " + pattern + " with " + newret);
}
// trace ObjC methods
function traceObjC(impl, name, backtrace) {
    console.log("*** Tracing " + name);
    Interceptor.attach(impl, {
        onEnter: function (args) {
            console.log("*** entered " + name);
            console.log("Caller: " + DebugSymbol.fromAddress(this.returnAddress));
            // print args
            if (name.indexOf(":") !== -1) {
                console.log("Parameters:");
                var par = name.split(":");
                par[0] = par[0].split(" ")[1];
                for (var i = 0; i < par.length - 1; i++) {
                    printArg(par[i] + ": ", args[i + 2]);
                }
            }
            if (backtrace === "true") {
                console.log("Backtrace:\n\t" + Thread.backtrace(this.context, Backtracer.ACCURATE)
                    .map(DebugSymbol.fromAddress).join("\n\t"));
            }
        },
        onLeave: function (retval) {
            console.log("*** exiting " + name);
            console.log("Return value:");
            printArg("retval: ", retval);
        }
    });
}
// trace a specific Java Method
function traceJavaMethod(pattern, backtrace) {
    var targetClassMethod = parseJavaMethod(pattern);
    //console.log(targetClassMethod);
    var argsTargetClassMethod = getJavaMethodArguments(pattern);
    //console.log(argsTargetClassMethod);
    var delim = targetClassMethod.lastIndexOf(".");
    if (delim === -1)
        return;
    var targetClass = targetClassMethod.slice(0, delim);
    var targetMethod = targetClassMethod.slice(delim + 1, targetClassMethod.length);
    var hook = Java.use(targetClass);
    //var overloadCount = hook[targetMethod].overloads.length;
    console.log("*** Tracing " + pattern);
    hook[targetMethod].overload.apply(hook[targetMethod], argsTargetClassMethod).implementation = function () {
        console.log("*** entered " + targetClassMethod);
        // print args
        if (arguments.length)
            console.log("Parameters:");
        for (var j = 0; j < arguments.length; j++) {
            console.log("\targ[" + j + "]: " + arguments[j]);
        }
        // print backtrace
        if (backtrace === "true") {
            Java.perform(function () {
                var threadClass = Java.use("java.lang.Thread");
                var currentThread = threadClass.currentThread();
                var currentStackTrace = currentThread.getStackTrace();
                console.log("Backtrace:");
                currentStackTrace.forEach(function (st) {
                    console.log("\t" + st.toString());
                });
            });
        }
        // print retval
        var retval = this[targetMethod].apply(this, arguments);
        console.log("*** exiting " + targetClassMethod);
        console.log("Return value:");
        console.log("\tretval: " + retval);
        return retval;
    };
}
// trace Module functions
function traceModule(impl, name, backtrace) {
    console.log("*** Tracing " + name);
    Interceptor.attach(impl, {
        onEnter: function (args) {
            console.log("*** entered " + name);
            if (backtrace === "true") {
                console.log("Backtrace:\n\t" + Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join("\n\t"));
            }
        },
        onLeave: function (retval) {
            console.log("*** exiting " + name);
            console.log("Return value:");
            if (ObjC.available) {
                printArg("retval: ", retval);
            }
            else {
                console.log("\tretval: ", retval);
            }
        }
    });
}
// print helper
function printArg(desc, arg) {
    if (arg != 0x0) {
        try {
            var objectArg = ObjC.Object(arg);
            console.log("\t(" + objectArg.$className + ") " + desc + objectArg.toString());
        }
        catch (err2) {
            console.log("\t" + desc + arg);
        }
    }
    else {
        console.log("\t" + desc + "0x0");
    }
}
// remove duplicates from array
function uniqBy(array, key) {
    var seen = {};
    return array.filter(function (item) {
        var k = key(item);
        return seen.hasOwnProperty(k) ? false : (seen[k] = true);
    });
}
/*
INPUT LIKE: public boolean a.b.functionName(java.lang.String)
OUTPUT LIKE: a.b.functionName
*/
function parseJavaMethod(method) {
    var parSplit = method.split("(");
    var spaceSplit = parSplit[0].split(" ");
    return spaceSplit[spaceSplit.length - 1];
}
//INPUT LIKE: public boolean a.b.functionName(java.lang.String,java.lang.String)
//OUTPUT LIKE: ["java.lang.String","java.lang.String"]
function getJavaMethodArguments(method) {
    var m = method.match(/.*\((.*)\).*/);
    if (m[1] !== "") {
        return m[1].split(",");
    }
    else {
        return [];
    }
}
âœ„
{"version":3,"file":"iosDefaultHooks.js","sourceRoot":"/Users/martinjakobsson/","sources":["Rearchero/Brida/iosDefaultHooks.js"],"names":[],"mappings":"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"}
âœ„
export function demangle(name) {
    var _swift_demangle = null;
    var _free = null;
    if (ObjC.available) {
        // Is Swift available?
        var tmp = Module.findBaseAddress("libswiftCore.dylib");
        if (tmp != null) {
            var addr_swift_demangle = Module.getExportByName("libswiftCore.dylib", "swift_demangle");
            var size_t = Process.pointerSize === 8 ? 'uint64' : Process.pointerSize === 4 ? 'uint32' : "unsupported platform";
            _swift_demangle = new NativeFunction(addr_swift_demangle, "pointer", ["pointer", size_t, "pointer", "pointer", 'int32']);
            var addr_free = Module.getExportByName("libsystem_malloc.dylib", "free");
            _free = new NativeFunction(addr_free, "void", ["pointer"]);
        }
    }
    if (_swift_demangle != null) {
        var fixname = name;
        var cStr = Memory.allocUtf8String(fixname);
        var demangled = _swift_demangle(cStr, fixname.length, ptr(0), ptr(0), 0);
        var res = null;
        if (demangled) {
            res = demangled.readUtf8String();
            _free(demangled);
        }
        if (res && res != fixname) {
            return res;
        }
        else {
            return "Requested resource cannot be demangled";
        }
    }
    else {
        return "Cant' demangle. Swift native function not found.";
    }
}
export function ios10pinning() {
    var tls_helper_create_peer_trust = new NativeFunction(Module.findExportByName(null, "tls_helper_create_peer_trust"), 'int', ['pointer', 'bool', 'pointer']);
    var errSecSuccess = 0;
    Interceptor.replace(tls_helper_create_peer_trust, new NativeCallback(function (hdsk, server, trustRef) {
        return errSecSuccess;
    }, 'int', ['pointer', 'bool', 'pointer']));
    console.log("SSL certificate validation bypass active");
}
export function ios11pinning() {
    /* OSStatus nw_tls_create_peer_trust(tls_handshake_t hdsk, bool server, SecTrustRef *trustRef); */
    var tls_helper_create_peer_trust = new NativeFunction(Module.findExportByName(null, "nw_tls_create_peer_trust"), 'int', ['pointer', 'bool', 'pointer']);
    var errSecSuccess = 0;
    Interceptor.replace(tls_helper_create_peer_trust, new NativeCallback(function (hdsk, server, trustRef) {
        return errSecSuccess;
    }, 'int', ['pointer', 'bool', 'pointer']));
    console.log("SSL certificate validation bypass active");
}
export function ios12pinning() {
    var SSL_VERIFY_NONE = 0;
    var ssl_ctx_set_custom_verify;
    var ssl_get_psk_identity;
    /* Create SSL_CTX_set_custom_verify NativeFunction
    *  Function signature https://github.com/google/boringssl/blob/7540cc2ec0a5c29306ed852483f833c61eddf133/include/openssl/ssl.h#L2294
    */
    ssl_ctx_set_custom_verify = new NativeFunction(Module.findExportByName("libboringssl.dylib", "SSL_CTX_set_custom_verify"), 'void', ['pointer', 'int', 'pointer']);
    /* Create SSL_get_psk_identity NativeFunction
    * Function signature https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#SSL_get_psk_identity
    */
    ssl_get_psk_identity = new NativeFunction(Module.findExportByName("libboringssl.dylib", "SSL_get_psk_identity"), 'pointer', ['pointer']);
    /** Custom callback passed to SSL_CTX_set_custom_verify */
    function custom_verify_callback_that_does_not_validate(ssl, out_alert) {
        return SSL_VERIFY_NONE;
    }
    /** Wrap callback in NativeCallback for frida */
    var ssl_verify_result_t = new NativeCallback(function (ssl, out_alert) {
        custom_verify_callback_that_does_not_validate(ssl, out_alert);
    }, 'int', ['pointer', 'pointer']);
    Interceptor.replace(ssl_ctx_set_custom_verify, new NativeCallback(function (ssl, mode, callback) {
        //  |callback| performs the certificate verification. Replace this with our custom callback
        ssl_ctx_set_custom_verify(ssl, mode, ssl_verify_result_t);
    }, 'void', ['pointer', 'int', 'pointer']));
    Interceptor.replace(ssl_get_psk_identity, new NativeCallback(function (ssl) {
        return "notarealPSKidentity";
    }, 'pointer', ['pointer']));
    console.log("[+] Bypass successfully loaded ");
}
export function ios13pinning() {
    try {
        Module.ensureInitialized("libboringssl.dylib");
    }
    catch (err) {
        console.log("libboringssl.dylib module not loaded. Trying to manually load it.");
        Module.load("libboringssl.dylib");
    }
    var SSL_VERIFY_NONE = 0;
    var ssl_set_custom_verify;
    var ssl_get_psk_identity;
    ssl_set_custom_verify = new NativeFunction(Module.findExportByName("libboringssl.dylib", "SSL_set_custom_verify"), 'void', ['pointer', 'int', 'pointer']);
    /* Create SSL_get_psk_identity NativeFunction
    * Function signature https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#SSL_get_psk_identity
    */
    ssl_get_psk_identity = new NativeFunction(Module.findExportByName("libboringssl.dylib", "SSL_get_psk_identity"), 'pointer', ['pointer']);
    /** Custom callback passed to SSL_CTX_set_custom_verify */
    function custom_verify_callback_that_does_not_validate(ssl, out_alert) {
        return SSL_VERIFY_NONE;
    }
    /** Wrap callback in NativeCallback for frida */
    var ssl_verify_result_t = new NativeCallback(function (ssl, out_alert) {
        custom_verify_callback_that_does_not_validate(ssl, out_alert);
    }, 'int', ['pointer', 'pointer']);
    Interceptor.replace(ssl_set_custom_verify, new NativeCallback(function (ssl, mode, callback) {
        //  |callback| performs the certificate verification. Replace this with our custom callback
        ssl_set_custom_verify(ssl, mode, ssl_verify_result_t);
    }, 'void', ['pointer', 'int', 'pointer']));
    Interceptor.replace(ssl_get_psk_identity, new NativeCallback(function (ssl) {
        return "notarealPSKidentity";
    }, 'pointer', ['pointer']));
    console.log("[+] Bypass successfully loaded ");
}
export function iosbypasstouchid() {
    var hook = ObjC.classes.LAContext["- evaluatePolicy:localizedReason:reply:"];
    Interceptor.attach(hook.implementation, {
        onEnter: function (args) {
            send("Hooking Touch Id..");
            var block = new ObjC.Block(args[4]);
            const appCallback = block.implementation;
            block.implementation = function (error, value) {
                const result = appCallback(1, null);
                return result;
            };
        },
    });
}
export function iosjailbreak() {
    const paths = ['/Applications/Cydia.app',
        '/Applications/FakeCarrier.app',
        '/Applications/Icy.app',
        '/Applications/IntelliScreen.app',
        '/Applications/MxTube.app',
        '/Applications/RockApp.app',
        '/Applications/SBSettings.app',
        '/Applications/WinterBoard.app',
        '/Applications/blackra1n.app',
        '/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist',
        '/Library/MobileSubstrate/DynamicLibraries/Veency.plist',
        '/Library/MobileSubstrate/MobileSubstrate.dylib',
        '/System/Library/LaunchDaemons/com.ikey.bbot.plist',
        '/System/Library/LaunchDaemons/com.saurik.Cydia.Startup.plist',
        '/bin/bash',
        '/bin/sh',
        '/etc/apt',
        '/etc/ssh/sshd_config',
        '/private/var/lib/apt',
        '/private/var/lib/cydia',
        '/private/var/mobile/Library/SBSettings/Themes',
        '/private/var/stash',
        '/private/var/tmp/cydia.log',
        '/usr/bin/sshd',
        '/usr/libexec/sftp-server',
        '/usr/libexec/ssh-keysign',
        '/usr/sbin/sshd',
        '/var/cache/apt',
        '/var/lib/apt',
        '/private/jailbreak.txt',
        '/var/lib/cydia'];
    const subject = 'jailbreak';
    if (ObjC.available) {
        //function bypassJailbreak() {
        /* eslint no-param-reassign: 0, camelcase: 0, prefer-destructuring: 0 */
        Interceptor.attach(Module.findExportByName(null, 'open'), {
            onEnter(args) {
                if (!args[0])
                    return;
                const backtrace = Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).filter(function (e) { return e.name; }).join("\n\t\t");
                //e => e.name)
                //const path = Memory.readUtf8String(args[0])
                const path = args[0].readUtf8String();
                if (paths.indexOf(path) > -1) {
                    var newPath = "/QZQZ" + path.substring(5);
                    //console.log(newPath)
                    console.log("*** Jailbrek check detected - trying to elude check (if it does not work, use backtrace to elude main function)");
                    console.log("\tMethod: open");
                    console.log("\tPath: " + path);
                    console.log("\tTime: " + new Date().getTime());
                    console.log("\tBacktrace: " + backtrace);
                    console.log("*** END Jailbrek check detected");
                    //args[0] = NULL
                    args[0].writeUtf8String(newPath);
                }
            }
        });
        const statHandler = {
            onEnter(args) {
                if (!args[0])
                    return;
                //const path = Memory.readUtf8String(args[0])
                const path = args[0].readUtf8String();
                const backtrace = Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).filter(function (e) { return e.name; }).join("\n\t\t");
                // e => e.name
                if (paths.indexOf(path) > -1) {
                    var newPath = "/QZQZ" + path.substring(5);
                    console.log("*** Jailbrek check detected - trying to elude check (if it does not work, use backtrace to elude main function)");
                    console.log("\tMethod: stat");
                    console.log("\tPath: " + path);
                    console.log("\tTime: " + new Date().getTime());
                    console.log("\tBacktrace: " + backtrace);
                    console.log("*** END Jailbrek check detected");
                    args[0].writeUtf8String(newPath);
                    //args[0] = NULL
                }
            }
        };
        Interceptor.attach(Module.findExportByName(null, 'stat'), statHandler);
        Interceptor.attach(Module.findExportByName(null, 'stat64'), statHandler);
        Interceptor.attach(Module.findExportByName(null, 'getenv'), {
            onEnter(args) {
                //const key = Memory.readUtf8String(args[0])
                const key = args[0].readUtf8String();
                const backtrace = Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).filter(function (e) { return e.name; }).join("\n\t\t");
                // e => e.name
                this.print_ret = false;
                if (key === 'DYLD_INSERT_LIBRARIES') {
                    this.print_ret = true;
                    console.log("*** Jailbrek check detected - trying to elude check (if it does not work, use backtrace to elude main function)");
                    console.log("\tenv: DYLD_INSERT_LIBRARIES");
                    console.log("\tTime: " + new Date().getTime());
                    console.log("\tBacktrace: " + backtrace);
                    console.log("*** END Jailbrek check detected");
                    //args[0] = NULL
                }
            },
            onLeave(retVal) {
                if (this.print_ret == true) {
                    //send(retVal);
                    retVal.replace(ptr(0));
                }
            }
        });
        Interceptor.attach(Module.findExportByName(null, '_dyld_get_image_name'), {
            onLeave(retVal) {
                if (Memory.readUtf8String(retVal).indexOf('MobileSubstrate') > -1)
                    retVal.replace(ptr(0x00));
            }
        });
        Interceptor.attach(Module.findExportByName(null, 'fork'), {
            onLeave(retVal) {
                retVal.replace(ptr(-1));
                // todo: send
            }
        });
        //const { UIApplication, NSURL, NSFileManager } = ObjC.classes
        const UIApplication = ObjC.classes.UIApplication;
        const NSURL = ObjC.classes.NSURL;
        const NSFileManager = ObjC.classes.NSFileManager;
        const canOpenURL_publicURLsOnly_ = UIApplication['- _canOpenURL:publicURLsOnly:'];
        Interceptor.attach(canOpenURL_publicURLsOnly_.implementation, {
            onEnter(args) {
                if (args[2].isNull())
                    return;
                const url = ObjC.Object(args[2]).toString();
                const backtrace = Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).filter(function (e) { return e.name; }).join("\n\t\t");
                // e => e.name
                if (/^cydia:\/\//i.exec(url)) {
                    args[2] = NSURL.URLWithString_('invalid://');
                    this.shouldOverride = true;
                    console.log("*** Jailbrek check detected - trying to elude check (if it does not work, use backtrace to elude main function)");
                    console.log("\turl: " + url);
                    console.log("\tTime: " + new Date().getTime());
                    console.log("\tBacktrace: " + backtrace);
                    console.log("*** END Jailbrek check detected");
                }
            },
            onLeave(retVal) {
                if (this.shouldOverride)
                    retVal.replace(ptr(0));
            }
        });
        Interceptor.attach(NSFileManager['- fileExistsAtPath:'].implementation, {
            onEnter(args) {
                if (args[2].isNull())
                    return;
                const path = new ObjC.Object(args[2]).toString();
                const backtrace = Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).filter(function (e) { return e.name; }).join("\n\t\t");
                // e => e.name
                if (paths.indexOf(path) > -1) {
                    console.log("*** Jailbrek check detected - trying to elude check (if it does not work, use backtrace to elude main function)");
                    console.log("\tpath: " + path);
                    console.log("\tTime: " + new Date().getTime());
                    console.log("\tBacktrace: " + backtrace);
                    console.log("*** END Jailbrek check detected");
                    this.shouldOverride = true;
                }
            },
            onLeave(retVal) {
                if (this.shouldOverride)
                    retVal.replace(ptr('0x00'));
            }
        });
    }
}
export function iosdumpkeychain() {
    function constantLookup(v) {
        if (v in kSecConstantReverse) {
            return kSecConstantReverse[v];
        }
        else {
            return v;
        }
    }
    function odas(raw) {
        try {
            const data = new ObjC.Object(raw);
            return Memory.readUtf8String(data.bytes(), data.length());
        }
        catch (_) {
            try {
                return raw.toString();
            }
            catch (__) {
                return '';
            }
        }
    }
    function decodeOd(item, flags) {
        const constraints = item;
        const constraintEnumerator = constraints.keyEnumerator();
        var constraintKey;
        for (constraintKey = 0; constraintKey !== null; constraintEnumerator.nextObject()) {
            switch (odas(constraintKey)) {
                case 'cpo':
                    flags.push('kSecAccessControlUserPresence');
                    break;
                case 'cup':
                    flags.push('kSecAccessControlDevicePasscode');
                    break;
                case 'pkofn':
                    flags.push(constraints.objectForKey_('pkofn') === 1 ? 'Or' : 'And');
                    break;
                case 'cbio':
                    flags.push(constraints.objectForKey_('cbio').count() === 1
                        ? 'kSecAccessControlTouchIDAny'
                        : 'kSecAccessControlTouchIDCurrentSet');
                    break;
                default:
                    break;
            }
        }
    }
    function decodeAcl(entry, SecAccessControlGetConstraints) {
        // No access control? Move along.
        if (!entry.containsKey_(kSecAttrAccessControl))
            return [];
        const constraints = SecAccessControlGetConstraints(entry.objectForKey_(kSecAttrAccessControl));
        if (constraints.isNull())
            return [];
        const accessControls = ObjC.Object(constraints);
        const flags = [];
        const enumerator = accessControls.keyEnumerator();
        var key;
        for (key = enumerator.nextObject(); key !== null; key = enumerator.nextObject()) {
            const item = accessControls.objectForKey_(key);
            switch (odas(key)) {
                case 'dacl':
                    break;
                case 'osgn':
                    flags.push('PrivateKeyUsage');
                case 'od':
                    decodeOd(item, flags);
                    break;
                case 'prp':
                    flags.push('ApplicationPassword');
                    break;
                default:
                    break;
            }
        }
        return flags;
    }
    const kSecReturnAttributes = 'r_Attributes', kSecReturnData = 'r_Data', kSecReturnRef = 'r_Ref', kSecMatchLimit = 'm_Limit', kSecMatchLimitAll = 'm_LimitAll', kSecClass = 'class', kSecClassKey = 'keys', kSecClassIdentity = 'idnt', kSecClassCertificate = 'cert', kSecClassGenericPassword = 'genp', kSecClassInternetPassword = 'inet', kSecAttrService = 'svce', kSecAttrAccount = 'acct', kSecAttrAccessGroup = 'agrp', kSecAttrLabel = 'labl', kSecAttrCreationDate = 'cdat', kSecAttrAccessControl = 'accc', kSecAttrGeneric = 'gena', kSecAttrSynchronizable = 'sync', kSecAttrModificationDate = 'mdat', kSecAttrServer = 'srvr', kSecAttrDescription = 'desc', kSecAttrComment = 'icmt', kSecAttrCreator = 'crtr', kSecAttrType = 'type', kSecAttrScriptCode = 'scrp', kSecAttrAlias = 'alis', kSecAttrIsInvisible = 'invi', kSecAttrIsNegative = 'nega', kSecAttrHasCustomIcon = 'cusi', kSecProtectedDataItemAttr = 'prot', kSecAttrAccessible = 'pdmn', kSecAttrAccessibleWhenUnlocked = 'ak', kSecAttrAccessibleAfterFirstUnlock = 'ck', kSecAttrAccessibleAlways = 'dk', kSecAttrAccessibleWhenUnlockedThisDeviceOnly = 'aku', kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly = 'cku', kSecAttrAccessibleAlwaysThisDeviceOnly = 'dku';
    const kSecConstantReverse = {
        r_Attributes: 'kSecReturnAttributes',
        r_Data: 'kSecReturnData',
        r_Ref: 'kSecReturnRef',
        m_Limit: 'kSecMatchLimit',
        m_LimitAll: 'kSecMatchLimitAll',
        class: 'kSecClass',
        keys: 'kSecClassKey',
        idnt: 'kSecClassIdentity',
        cert: 'kSecClassCertificate',
        genp: 'kSecClassGenericPassword',
        inet: 'kSecClassInternetPassword',
        svce: 'kSecAttrService',
        acct: 'kSecAttrAccount',
        agrp: 'kSecAttrAccessGroup',
        labl: 'kSecAttrLabel',
        srvr: 'kSecAttrServer',
        cdat: 'kSecAttrCreationDate',
        accc: 'kSecAttrAccessControl',
        gena: 'kSecAttrGeneric',
        sync: 'kSecAttrSynchronizable',
        mdat: 'kSecAttrModificationDate',
        desc: 'kSecAttrDescription',
        icmt: 'kSecAttrComment',
        crtr: 'kSecAttrCreator',
        type: 'kSecAttrType',
        scrp: 'kSecAttrScriptCode',
        alis: 'kSecAttrAlias',
        invi: 'kSecAttrIsInvisible',
        nega: 'kSecAttrIsNegative',
        cusi: 'kSecAttrHasCustomIcon',
        prot: 'kSecProtectedDataItemAttr',
        pdmn: 'kSecAttrAccessible',
        ak: 'kSecAttrAccessibleWhenUnlocked',
        ck: 'kSecAttrAccessibleAfterFirstUnlock',
        dk: 'kSecAttrAccessibleAlways',
        aku: 'kSecAttrAccessibleWhenUnlockedThisDeviceOnly',
        cku: 'kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly',
        dku: 'kSecAttrAccessibleAlwaysThisDeviceOnly'
    };
    const kSecClasses = [kSecClassKey, kSecClassIdentity, kSecClassCertificate, kSecClassGenericPassword, kSecClassInternetPassword];
    const NSMutableDictionary = ObjC.classes.NSMutableDictionary;
    const SecItemCopyMatching = new NativeFunction(ptr(Module.findExportByName('Security', 'SecItemCopyMatching')), 'pointer', ['pointer', 'pointer']);
    const SecItemDelete = new NativeFunction(ptr(Module.findExportByName('Security', 'SecItemDelete')), 'pointer', ['pointer']);
    const SecAccessControlGetConstraints = new NativeFunction(ptr(Module.findExportByName('Security', 'SecAccessControlGetConstraints')), 'pointer', ['pointer']);
    const NSCFBoolean = ObjC.classes.__NSCFBoolean;
    const kCFBooleanTrue = NSCFBoolean.numberWithBool_(true);
    const result = [];
    const query = NSMutableDictionary.alloc().init();
    query.setObject_forKey_(kCFBooleanTrue, kSecReturnAttributes);
    query.setObject_forKey_(kCFBooleanTrue, kSecReturnData);
    query.setObject_forKey_(kCFBooleanTrue, kSecReturnRef);
    query.setObject_forKey_(kSecMatchLimitAll, kSecMatchLimit);
    kSecClasses.forEach(function (clazz) {
        query.setObject_forKey_(clazz, kSecClass);
        const p = Memory.alloc(Process.pointerSize);
        const status = SecItemCopyMatching(query, p);
        /* eslint eqeqeq: 0 */
        if (status != 0x00)
            return;
        const arr = new ObjC.Object(Memory.readPointer(p));
        var i, size;
        for (i = 0, size = arr.count(); i < size; i++) {
            const item = arr.objectAtIndex_(i);
            result.push({
                clazz: constantLookup(clazz),
                creation: odas(item.objectForKey_(kSecAttrCreationDate)),
                modification: odas(item.objectForKey_(kSecAttrModificationDate)),
                description: odas(item.objectForKey_(kSecAttrDescription)),
                comment: odas(item.objectForKey_(kSecAttrComment)),
                creator: odas(item.objectForKey_(kSecAttrCreator)),
                type: odas(item.objectForKey_(kSecAttrType)),
                scriptCode: odas(item.objectForKey_(kSecAttrScriptCode)),
                alias: odas(item.objectForKey_(kSecAttrAlias)),
                invisible: odas(item.objectForKey_(kSecAttrIsInvisible)),
                negative: odas(item.objectForKey_(kSecAttrIsNegative)),
                customIcon: odas(item.objectForKey_(kSecAttrHasCustomIcon)),
                protected: odas(item.objectForKey_(kSecProtectedDataItemAttr)),
                accessControl: decodeAcl(item, SecAccessControlGetConstraints).join(' '),
                accessibleAttribute: constantLookup(odas(item.objectForKey_(kSecAttrAccessible))),
                entitlementGroup: odas(item.objectForKey_(kSecAttrAccessGroup)),
                generic: odas(item.objectForKey_(kSecAttrGeneric)),
                service: odas(item.objectForKey_(kSecAttrService)),
                account: odas(item.objectForKey_(kSecAttrAccount)),
                label: odas(item.objectForKey_(kSecAttrLabel)),
                data: odas(item.objectForKey_('v_Data'))
            });
        }
    });
    console.log("**** KEYCHAIN DUMP ****");
    var j, k, currentEntry;
    for (k in result) {
        console.log("\tEntry " + k);
        currentEntry = result[k];
        for (j in currentEntry) {
            if (currentEntry[j]) {
                console.log("\t\t" + j + ": " + currentEntry[j]);
            }
        }
    }
    console.log("**** END KEYCHAIN DUMP ****");
}
export function iosdataprotectionkeys() {
    function listDirectoryContentsAtPath(path) {
        var fileManager = ObjC.classes.NSFileManager.defaultManager();
        var enumerator = fileManager.enumeratorAtPath_(path);
        var file;
        var paths = [];
        while ((file = enumerator.nextObject()) !== null) {
            paths.push(path + '/' + file);
        }
        return paths;
    }
    function listHomeDirectoryContents() {
        var homePath = ObjC.classes.NSProcessInfo.processInfo().environment().objectForKey_("HOME").toString();
        var paths = listDirectoryContentsAtPath(homePath);
        return paths;
    }
    function getDataProtectionKeyForPath(path) {
        var fileManager = ObjC.classes.NSFileManager.defaultManager();
        var urlPath = ObjC.classes.NSURL.fileURLWithPath_(path);
        var attributeDict = dictFromNSDictionary(fileManager.attributesOfItemAtPath_error_(urlPath.path(), NULL));
        return attributeDict.NSFileProtectionKey;
    }
    // helper function available at https://codeshare.frida.re/@dki/ios-app-info/
    function dictFromNSDictionary(nsDict) {
        var jsDict = {};
        var keys = nsDict.allKeys();
        var count = keys.count();
        for (var i = 0; i < count; i++) {
            var key = keys.objectAtIndex_(i);
            var value = nsDict.objectForKey_(key);
            jsDict[key.toString()] = value.toString();
        }
        return jsDict;
    }
    var fileManager = ObjC.classes.NSFileManager.defaultManager();
    var dict = [];
    var paths = listHomeDirectoryContents();
    var isDir = Memory.alloc(Process.pointerSize);
    Memory.writePointer(isDir, NULL);
    for (var i = 0; i < paths.length; i++) {
        fileManager.fileExistsAtPath_isDirectory_(paths[i], isDir);
        if (Memory.readPointer(isDir) == 0) {
            dict.push({
                path: paths[i],
                fileProtectionKey: getDataProtectionKeyForPath(paths[i])
            });
        }
    }
    console.log("**** Files with Data Protection ****");
    var k;
    for (k in dict) {
        console.log("\tFile " + k);
        console.log("\tPath: " + dict[k]['path']);
        console.log("\tFile protection key: " + dict[k]['fileProtectionKey']);
        console.log("");
    }
    console.log("**** END Files with Data Protection ****");
}
export function iosdumpcurrentencryptedapp() {
    var O_RDONLY = 0;
    var O_WRONLY = 1;
    var O_RDWR = 2;
    var O_CREAT = 512;
    var SEEK_SET = 0;
    var SEEK_CUR = 1;
    var SEEK_END = 2;
    var NSString = ObjC.classes.NSString;
    var NSFileManager = ObjC.classes.NSFileManager;
    function allocStr(str) {
        return Memory.allocUtf8String(str);
    }
    function getNSString(str) {
        return NSString.stringWithUTF8String_(Memory.allocUtf8String(str));
    }
    function getStr(addr) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.readUtf8String(addr);
    }
    function getStrSize(addr, size) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.readUtf8String(addr, size);
    }
    function putStr(addr, str) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.writeUtf8String(addr, str);
    }
    function getByteArr(addr, l) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.readByteArray(addr, l);
    }
    function getU8(addr) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.readU8(addr);
    }
    function putU8(addr, n) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.writeU8(addr, n);
    }
    function getU16(addr) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.readU16(addr);
    }
    function putU16(addr, n) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.writeU16(addr, n);
    }
    function getU32(addr) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.readU32(addr);
    }
    function putU32(addr, n) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.writeU32(addr, n);
    }
    function getU64(addr) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.readU64(addr);
    }
    function putU64(addr, n) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.writeU64(addr, n);
    }
    function getPt(addr) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        return Memory.readPointer(addr);
    }
    function putPt(addr, n) {
        if (typeof addr == "number") {
            addr = ptr(addr);
        }
        if (typeof n == "number") {
            n = ptr(n);
        }
        return Memory.writePointer(addr, n);
    }
    function malloc(size) {
        return Memory.alloc(size);
    }
    function getExportFunction(type, name, ret, args) {
        var nptr;
        nptr = Module.findExportByName(null, name);
        if (nptr === null) {
            console.log("cannot find " + name);
            return null;
        }
        else {
            if (type === "f") {
                var funclet = new NativeFunction(nptr, ret, args);
                if (typeof funclet === "undefined") {
                    console.log("parse error " + name);
                    return null;
                }
                return funclet;
            }
            else if (type === "d") {
                var datalet = Memory.readPointer(nptr);
                if (typeof datalet === "undefined") {
                    console.log("parse error " + name);
                    return null;
                }
                return datalet;
            }
        }
    }
    function dumpMemory(addr, length) {
        console.log(hexdump(Memory.readByteArray(addr, length), {
            offset: 0,
            length: length,
            header: true,
            ansi: true
        }));
    }
    var NSSearchPathForDirectoriesInDomains = getExportFunction("f", "NSSearchPathForDirectoriesInDomains", "pointer", ["int", "int", "int"]);
    var wrapper_open = getExportFunction("f", "open", "int", ["pointer", "int", "int"]);
    var read = getExportFunction("f", "read", "int", ["int", "pointer", "int"]);
    var write = getExportFunction("f", "write", "int", ["int", "pointer", "int"]);
    var lseek = getExportFunction("f", "lseek", "int64", ["int", "int64", "int"]);
    var close = getExportFunction("f", "close", "int", ["int"]);
    function getCacheDir(index) {
        var NSUserDomainMask = 1;
        var npdirs = NSSearchPathForDirectoriesInDomains(index, NSUserDomainMask, 1);
        var len = ObjC.Object(npdirs).count();
        if (len == 0) {
            return '';
        }
        return ObjC.Object(npdirs).objectAtIndex_(0).toString();
    }
    function open(pathname, flags, mode) {
        if (typeof pathname == "string") {
            pathname = allocStr(pathname);
        }
        return wrapper_open(pathname, flags, mode);
    }
    // Export function
    var modules = null;
    function getAllAppModules() {
        if (modules == null) {
            modules = new Array();
            var tmpmods = Process.enumerateModulesSync();
            for (var i = 0; i < tmpmods.length; i++) {
                if (tmpmods[i].path.indexOf(".app") != -1) {
                    modules.push(tmpmods[i]);
                }
            }
        }
        return modules;
    }
    var MH_MAGIC = 0xfeedface;
    var MH_CIGAM = 0xcefaedfe;
    var MH_MAGIC_64 = 0xfeedfacf;
    var MH_CIGAM_64 = 0xcffaedfe;
    var LC_SEGMENT = 0x1;
    var LC_SEGMENT_64 = 0x19;
    var LC_ENCRYPTION_INFO = 0x21;
    var LC_ENCRYPTION_INFO_64 = 0x2C;
    // You can dump .app or dylib (Encrypt/No Encrypt)
    function dumpModule(name) {
        if (modules == null) {
            modules = getAllAppModules();
        }
        var targetmod = null;
        for (var i = 0; i < modules.length; i++) {
            if (modules[i].path.indexOf(name) != -1) {
                targetmod = modules[i];
                break;
            }
        }
        if (targetmod == null) {
            console.log("Cannot find module");
        }
        var modbase = modules[i].base;
        var modsize = modules[i].size;
        var newmodname = modules[i].name + ".decrypted";
        var finddir = false;
        var newmodpath = "";
        var fmodule = -1;
        var index = 1;
        while (!finddir) {
            try {
                var base = getCacheDir(index);
                if (base != null) {
                    newmodpath = getCacheDir(index) + "/" + newmodname;
                    fmodule = open(newmodpath, O_CREAT | O_RDWR, 0);
                    if (fmodule != -1) {
                        break;
                    }
                    ;
                }
            }
            catch (e) {
            }
            index++;
        }
        var oldmodpath = modules[i].path;
        var foldmodule = open(oldmodpath, O_RDONLY, 0);
        if (fmodule == -1 || foldmodule == -1) {
            console.log("Cannot open file" + newmodpath);
            return;
        }
        var BUFSIZE = 4096;
        var buffer = malloc(BUFSIZE);
        while (read(foldmodule, buffer, BUFSIZE)) {
            write(fmodule, buffer, BUFSIZE);
        }
        // Find crypt info and recover
        var is64bit = false;
        var size_of_mach_header = 0;
        var magic = getU32(modbase);
        if (magic == MH_MAGIC || magic == MH_CIGAM) {
            is64bit = false;
            size_of_mach_header = 28;
        }
        else if (magic == MH_MAGIC_64 || magic == MH_CIGAM_64) {
            is64bit = true;
            size_of_mach_header = 32;
        }
        var ncmds = getU32(modbase.add(16));
        var off = size_of_mach_header;
        var offset_cryptoff = -1;
        var crypt_off = 0;
        var crypt_size = 0;
        var segments = [];
        for (var i = 0; i < ncmds; i++) {
            var cmd = getU32(modbase.add(off));
            var cmdsize = getU32(modbase.add(off + 4));
            if (cmd == LC_ENCRYPTION_INFO || cmd == LC_ENCRYPTION_INFO_64) {
                offset_cryptoff = off + 8;
                crypt_off = getU32(modbase.add(off + 8));
                crypt_size = getU32(modbase.add(off + 12));
            }
            off += cmdsize;
        }
        if (offset_cryptoff != -1) {
            var tpbuf = malloc(8);
            console.log("Fix decrypted at:" + offset_cryptoff.toString(16));
            putU64(tpbuf, 0);
            lseek(fmodule, offset_cryptoff, SEEK_SET);
            write(fmodule, tpbuf, 8);
            console.log("Fix decrypted at:" + crypt_off.toString(16));
            lseek(fmodule, crypt_off, SEEK_SET);
            write(fmodule, modbase.add(crypt_off), crypt_size);
        }
        console.log("Decrypted file at:" + newmodpath + " 0x" + modsize.toString(16));
        close(fmodule);
        close(foldmodule);
    }
    dumpModule(".app");
}
export function dumpcryptostuffios() {
    Interceptor.attach(Module.findExportByName("libSystem.B.dylib", "CCCrypt"), {
        onEnter: function (args) {
            console.log("*** ENTER CCCrypt ****");
            console.log("CCOperation: " + parseInt(args[0]));
            console.log("CCAlgorithm: " + parseInt(args[1]));
            console.log("CCOptions: " + parseInt(args[2]));
            if (ptr(args[3]) != 0) {
                console.log("Key:");
                console.log(base64ArrayBuffer(Memory.readByteArray(ptr(args[3]), parseInt(args[4]))));
            }
            else {
                console.log("Key: 0");
            }
            if (ptr(args[5]) != 0) {
                console.log("IV:");
                console.log(base64ArrayBuffer(Memory.readByteArray(ptr(args[5]), 16)));
            }
            else {
                console.log("IV: 0");
            }
            this.dataInLength = parseInt(args[7]);
            if (ptr(args[6]) != 0) {
                console.log("Data in ****:");
                console.log(base64ArrayBuffer(Memory.readByteArray(ptr(args[6]), this.dataInLength)));
            }
            else {
                console.log("Data in: null");
            }
            this.dataOut = args[8];
            this.dataOutLength = args[10];
        },
        onLeave: function (retval) {
            if (ptr(this.dataOut) != 0) {
                console.log("Data out");
                console.log(base64ArrayBuffer(Memory.readByteArray(this.dataOut, parseInt(ptr(Memory.readU32(ptr(this.dataOutLength), 4))))));
            }
            else {
                console.log("Data out: null");
            }
            console.log("*** EXIT CCCrypt ****");
        }
    });
    Interceptor.attach(Module.findExportByName("libSystem.B.dylib", "CCCryptorCreate"), {
        onEnter: function (args) {
            console.log("*** CCCryptorCreate ENTER ****");
            console.log("CCOperation: " + parseInt(args[0]));
            console.log("CCAlgorithm: " + parseInt(args[1]));
            console.log("CCOptions: " + parseInt(args[2]));
            if (ptr(args[3]) != 0) {
                console.log("Key:");
                console.log(base64ArrayBuffer(Memory.readByteArray(ptr(args[3]), parseInt(args[4]))));
            }
            else {
                console.log("Key: 0");
            }
            if (ptr(args[5]) != 0) {
                console.log("IV:");
                console.log(base64ArrayBuffer(Memory.readByteArray(ptr(args[5]), 16)));
            }
            else {
                console.log("IV: 0");
            }
        },
        onLeave: function (retval) {
            console.log("*** CCCryptorCreate EXIT ****");
        }
    });
    Interceptor.attach(Module.findExportByName("libSystem.B.dylib", "CCCryptorUpdate"), {
        onEnter: function (args) {
            console.log("*** CCCryptorUpdate ENTER ****");
            if (ptr(args[1]) != 0) {
                console.log("Data in:");
                console.log(base64ArrayBuffer(Memory.readByteArray(ptr(args[1]), parseInt(args[2]))));
            }
            else {
                console.log("Data in: null");
            }
            //this.len = args[4];
            this.len = args[5];
            this.out = args[3];
        },
        onLeave: function (retval) {
            if (ptr(this.out) != 0) {
                console.log("Data out CCUpdate:");
                console.log(base64ArrayBuffer(Memory.readByteArray(this.out, parseInt(ptr(Memory.readU32(ptr(this.len), 4))))));
            }
            else {
                console.log("Data out: null");
            }
            console.log("*** CCCryptorUpdate EXIT ****");
        }
    });
    Interceptor.attach(Module.findExportByName("libSystem.B.dylib", "CCCryptorFinal"), {
        onEnter: function (args) {
            console.log("*** CCCryptorFinal ENTER ****");
            //this.len2 = args[2];
            this.len2 = args[3];
            this.out2 = args[1];
        },
        onLeave: function (retval) {
            if (ptr(this.out2) != 0) {
                console.log("Data out CCCryptorFinal:");
                console.log(base64ArrayBuffer(Memory.readByteArray(this.out2, parseInt(ptr(Memory.readU32(ptr(this.len2), 4))))));
            }
            else {
                console.log("Data out: null");
            }
            console.log("*** CCCryptorFinal EXIT ****");
        }
    });
    //CC_SHA1_Init(CC_SHA1_CTX *c);
    Interceptor.attach(Module.findExportByName("libSystem.B.dylib", "CC_SHA1_Init"), {
        onEnter: function (args) {
            console.log("*** CC_SHA1_Init ENTER ****");
            console.log("Context address: " + args[0]);
        }
    });
    //CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len);
    Interceptor.attach(Module.findExportByName("libSystem.B.dylib", "CC_SHA1_Update"), {
        onEnter: function (args) {
            console.log("*** CC_SHA1_Update ENTER ****");
            console.log("Context address: " + args[0]);
            if (ptr(args[1]) != 0) {
                console.log("data:");
                console.log(base64ArrayBuffer(Memory.readByteArray(ptr(args[1]), parseInt(args[2]))));
            }
            else {
                console.log("data: null");
            }
        }
    });
    //CC_SHA1_Final(unsigned char *md, CC_SHA1_CTX *c);
    Interceptor.attach(Module.findExportByName("libSystem.B.dylib", "CC_SHA1_Final"), {
        onEnter: function (args) {
            this.mdSha = args[0];
            this.ctxSha = args[1];
        },
        onLeave: function (retval) {
            console.log("*** CC_SHA1_Final ENTER ****");
            console.log("Context address: " + this.ctxSha);
            if (ptr(this.mdSha) != 0) {
                console.log("Hash:");
                console.log(base64ArrayBuffer(Memory.readByteArray(ptr(this.mdSha), 20)));
            }
            else {
                console.log("Hash: null");
            }
        }
    });
    // Native ArrayBuffer to Base64
    // https://gist.github.com/jonleighton/958841
    function base64ArrayBuffer(arrayBuffer) {
        var base64 = '';
        var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        var bytes = new Uint8Array(arrayBuffer);
        var byteLength = bytes.byteLength;
        var byteRemainder = byteLength % 3;
        var mainLength = byteLength - byteRemainder;
        var a, b, c, d;
        var chunk;
        // Main loop deals with bytes in chunks of 3
        for (var i = 0; i < mainLength; i = i + 3) {
            // Combine the three bytes into a single integer
            chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
            // Use bitmasks to extract 6-bit segments from the triplet
            a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
            b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12
            c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6
            d = chunk & 63; // 63       = 2^6 - 1
            // Convert the raw binary segments to the appropriate ASCII encoding
            base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
        }
        // Deal with the remaining bytes and padding
        if (byteRemainder == 1) {
            chunk = bytes[mainLength];
            a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2
            // Set the 4 least significant bits to zero
            b = (chunk & 3) << 4; // 3   = 2^2 - 1
            base64 += encodings[a] + encodings[b] + '==';
        }
        else if (byteRemainder == 2) {
            chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];
            a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
            b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4
            // Set the 2 least significant bits to zero
            c = (chunk & 15) << 2; // 15    = 2^4 - 1
            base64 += encodings[a] + encodings[b] + encodings[c] + '=';
        }
        return base64;
    }
}